mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1)
sapply(mats_traits_bal, sum)
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
mats_traits_bal[sapply(mats_traits_bal, sum) == 0]
mats_traits_bal[!sapply(mats_traits_bal, sum) == 0]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
df_rand <- getnetmets(mats_rand_bal, mats_rand_unbal)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
length(df_traits)
df_traits
mats_traits_bal[[15]]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
ratio <- 1.5
listoftraitvecs <- all_t1_unbal
mats <- list()
mm <- outer(listoftraitvecs[[1]][[1]], listoftraitvecs[[2]][[1]],
function(x,y) as.numeric(exp(x-y) < ratio))
mm
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mm
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mm
matrix(1, 20, 20)
mm <- matrix(1, 20, 20)
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mm
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mats[[i]] <- mm
}
mats[!is.null(mats)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
# 		if(sum(mm) == 0) { mm <- NULL } else
# 			if( sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]) ) {mm <- NULL } else
# 					{ mm <- mm }
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
length(sapply(mats_traits_unbal, sum))
length(sapply(mats_traits_bal, sum))
mm
mm <- matrix(1, 20, 20)
mm
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]) ) {mm <- NULL } else
{ mm <- mm }
mm
i
dims(mm)
dim(mm)
str(mm)
mm <- matrix(1, 20, 20)
str(mm)
ncol(mm)
nrow(mm) * ncol(mm)
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mm
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
mats_traits_unbal[[2]]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats[!is.null(mats)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
mats_traits_unbal[[2]]
sapply(mats_traits_unbal, is.null)
mats_traits_unbal[is.null(mats_traits_unbal)]
mats_traits_unbal[sapply(mats_traits_unbal, is.null)]
mats_traits_unbal[!sapply(mats_traits_unbal, is.null)]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats[!sapply(mats, is.null)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_unbal, is.null)
sapply(mats_traits_unbal, sum)
sapply(mats_traits_bal, sum)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
df_traits
mats_traits_bal[[20]]
sum(mats_traits_bal[[20]])
df_traits_melt <- melt(df_traits)
head(df_traits_melt)
ggplot(df_traits_melt, aes(type, value, fill=variable)) +
theme_bw(base_size=18) +
geom_boxplot() +
facet_wrap(~ variable, scales="free") +
opts(legend.position = 'none')
library(rplos)
library(ggplot2); library(rgbif); library(maps)
dan_chr <- occurrencelist(
sciname = 'Danaus chrysippus', coordinatestatus = TRUE, maxresults = 200,
latlongdf = TRUE, removeZeros = TRUE)
dan_chr
library(ggplot2); library(rgbif); library(maps)
detach("package:rgbif")
install_github("rgbif", "vijaybarve")
library(rgbif)
install_github("rentrez", "ropensci")
library(rentrez)
pubmed_search <- entrez_search(db="pubmed", term="Dwarf Elephant", retmax=1)
entrez_summary(db="pubmed", ids=pubmed_search$ids)
library(knitr)
knit2pdf("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
knit2pdf("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
library(rentrez)
entrez_link(dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')
entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')
entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')$file
out <- entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')$file
out
xpathApply(out, "//Link")
xpathApply(out, "//Link", xmlValue)
xpathApply(out, "//Link", xmlValue)
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
do.call(xpathApply(out, "//Link", xmlValue), as.numeric)
do.call(as.numeric, xpathApply(out, "//Link", xmlValue))
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
out
xpathApply(out, "//LinkName")
xpathApply(out, "/LinkName")
getNodeSet(out, "/LinkName")
getNodeSet(out, "//LinkName")
getNodeSet(out, "//LinkName/Link")
xpathApply(out, "//LinkName/Link")
xpathApply(out, "//LinkName//Link")
xpathApply(out, "//LinkName:Link")
xpathApply(out, "//LinkName[Link]")
xpathApply(out, "//LinkName[pubmed_pubmed_citedin]")
xpathApply(out, "//LinkName:pubmed_pubmed_citedin")
xpathApply(out, "/LinkName:pubmed_pubmed_citedin")
xmlToList(out)
out
xpathApply(out, "LinkName/Link")
xpathApply(out, "@pubmed_pubmed_citedin")
xpathApply(out, "//LinkName[@pubmed_pubmed_citedin]")
getNodeSet(out, "//LinkName[@pubmed_pubmed_citedin]")
xpathApply(out, "/LinkName/pubmed_pubmed_citedin")
xpathApply(out, "//LinkName//pubmed_pubmed_citedin")
xpathApply(out, "//LinkName//Link")
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
dev_mode()
install_github('taxize_', 'edild')
library(taxize)
ia <- iucn_summary("Panthera uncia")
install_github('taxize_', 'edild')
detach("package:taxize")
install_github('taxize_', 'edild')
install_github('taxize_', 'ropensci')
#' Get a summary from the IUCN Redlist
#'
#' @import XML
#' @param x scientific name
#' @return A list with the following items:
#' \item{status}{Red List Category}
#' \item{history}{History of status}
#' \item{distr}{Geographic distribution}
#' \item{pop}{Population size estimates}
#' \item{trend}{Trend of population size}
#' \export
#'
#' @examples \dontrun{
#' ia <- iucn_summary("Panthera uncia")
#' ia$status
#' ia$history
#' ia$distr
#' ia$pop
#' ia$trend
#' }
iucn_summary <- function(x) {
spec <- tolower(x)
spec <- gsub(" ", "-", spec)
url <- paste("http://api.iucnredlist.org/go/", spec, sep="")
h <- htmlParse(url)
status <- xpathSApply(h, '//div[@id ="red_list_category_code"]', xmlValue)
history <- data.frame(year = xpathSApply(h, '//div[@class="year"]', xmlValue),
category = xpathSApply(h, '//div[@class="category"]', xmlValue))
distr <- xpathSApply(h, '//ul[@class="countries"]', xmlValue)
distr <- unlist(strsplit(distr, "\n"))
pop <- xpathSApply(h, '//div[@id="population"]/text()[preceding-sibling::br]', xmlValue)
pop <- do.call(rbind, lapply(strsplit(ia$pop, split=":"), rbind))
trend <- xpathSApply(h, '//div[@id="population_trend"]', xmlValue)
out <- list(status = status,
history = history,
distr = distr,
pop = pop,
trend = trend)
return(out)
}
ia <- iucn_summary("Panthera uncia")
library(XML)
ia <- iucn_summary("Panthera uncia")
ia$status
x="Panthera uncia"
spec <- tolower(x)
spec
spec <- gsub(" ", "-", spec)
url <- paste("http://api.iucnredlist.org/go/", spec, sep="")
h <- htmlParse(url)
status <- xpathSApply(h, '//div[@id ="red_list_category_code"]', xmlValue)
history <- data.frame(year = xpathSApply(h, '//div[@class="year"]', xmlValue),
category = xpathSApply(h, '//div[@class="category"]', xmlValue))
distr <- xpathSApply(h, '//ul[@class="countries"]', xmlValue)
distr <- unlist(strsplit(distr, "\n"))
pop <- xpathSApply(h, '//div[@id="population"]/text()[preceding-sibling::br]', xmlValue)
pop <- do.call(rbind, lapply(strsplit(ia$pop, split=":"), rbind))
pop
distr
history
status
h
pop
pop <- do.call(rbind, lapply(strsplit(pop, split=":"), rbind))
pop
trend <- xpathSApply(h, '//div[@id="population_trend"]', xmlValue)
trend
out <- list(status = status,
history = history,
distr = distr,
pop = pop,
trend = trend)
out
#' Get a summary from the IUCN Redlist.
#'
#' @import XML
#' @param sciname Scientific name
#' @return A list with the following items:
#' \item{status}{Red List Category}
#' \item{history}{History of status}
#' \item{distr}{Geographic distribution}
#' \item{pop}{Population size estimates}
#' \item{trend}{Trend of population size}
#' @examples \dontrun{
#' ia <- iucn_summary("Panthera uncia")
#' ia$status
#' ia$history
#' ia$distr
#' ia$pop
#' ia$trend
#' }
#' @export
iucn_summary <- function(sciname)
{
spec <- tolower(sciname)
spec <- gsub(" ", "-", spec)
url <- paste("http://api.iucnredlist.org/go/", spec, sep="")
h <- htmlParse(url)
status <- xpathSApply(h, '//div[@id ="red_list_category_code"]', xmlValue)
history <- data.frame(year = xpathSApply(h, '//div[@class="year"]', xmlValue),
category = xpathSApply(h, '//div[@class="category"]', xmlValue))
distr <- xpathSApply(h, '//ul[@class="countries"]', xmlValue)
distr <- unlist(strsplit(distr, "\n"))
pop <- xpathSApply(h, '//div[@id="population"]/text()[preceding-sibling::br]', xmlValue)
pop <- do.call(rbind, lapply(strsplit(pop, split=":"), rbind))
trend <- xpathSApply(h, '//div[@id="population_trend"]', xmlValue)
list(status = status,
history = history,
distr = distr,
pop = pop,
trend = trend)
}
ia <- iucn_summary("Panthera uncia")
ia$status
ia$history
ia$distr
ia$pop
ia$trend
dev_mode(FALSE)
library(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/taxize_")
install_github('taxize_', 'ropensci')
library(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/taxize_")
install_github('taxize_', 'ropensci')
library(taxize)
ia <- iucn_summary("Panthera uncia")
names(ia)
library(plyr)
mtcars
help(package="plyr")
ddply(mtcars, .(gear), mean(mpg))
ddply(mtcars, .(gear),
mean(mpg))
iris
ddply(iris, .(Species), mean(Sepal.Length))
ddply(iris, .(Species), summarise, mean(Sepal.Length))
split(iris, iris$Species)
ddply(iris, .(Species), summarise,
mean = mean(Sepal.Length),
se = sd(Sepal.Length) / sqrt(length(Species))
)
iris$Species2 <- iris$Species
head(iris)
ddply(iris, .(Species, Species2), summarise,
mean = mean(Sepal.Length),
se = sd(Sepal.Length) / sqrt(length(Species)),
species = unique(Species2)
)
help(package="plyr")
baseball
ddply(baseball, .(year), colwise(nmissing))
nmissing <- function(x) sum(is.na(x))
nmissing
ddply(baseball, .(year), colwise(nmissing))
head(baseball)
nmissing <- function(x) sum(x)
sumit <- function(x) sum(x)
ddply(baseball, .(year), colwise(sumit))
str(baseball)
ddply(baseball[,-c(1:5)], .(year), colwise(sumit))
str(baseball)
ddply(baseball[,-c(1,3:5)], .(year), colwise(sumit))
ddply(baseball[,-c(1,3:5)], .(year), colwise(sum(x)))
require(RMendeley)
getdois <- function (input) {
dois <- sapply(input, function(x) x$doi) # parse out DOIs
dois <- if(any(sapply(dois, is.null)) == TRUE){
dois[-(which(sapply(dois,is.null),arr.ind=TRUE))] } else
{dois}
dois[sapply(dois,str_length) > 0] # limit to DOIs > zero character length
}
je <- msearch("published_in:\"Journal of Ecology\"", numItems=2)
install_github("RMendeley", "ropensci", branch="dev")
require(RMendeley)
je <- msearch("published_in:\"Journal of Ecology\"", numItems=2)
msearch
require(RMendeley)
je <- msearch("published_in:\"Journal of Ecology\"", numItems=2)
m <- matrix(0, 10, 10)
apply(m, 1, function(x) sample(c(0,1), 1))
library(plyr)
aaply(m, 1, function(x) sample(c(0,1), 1))
m <- matrix(0, 10, 10)
m
aaply(m, 1, function(x) sample(c(0,1), 1))
aaply(m, c(1,2), function(x) sample(c(0,1), 1))
m <- matrix(0, 10, 10)
apply(m, c(1,2), function(x) sample(c(0,1),1))
apply(m, c(1,2), function(x) sample(c(0,1),1))
apply(m, c(1,2), function(x) sample(c(0,1),1))
matrix(rbinom(10*5, 1, 0.5), ncol = 5, nrow = 10)
library(inline); library(RcppArmadillo)
f <- cxxfunction(body='return wrap(arma::randu(5,10));', plugin='RcppArmadillo')
f <- cxxfunction(body='return wrap(arma::randu(5,10));', plugin='Rcpp')
mm <- matrix(0, 10, 5)
m <- 10
n <- 5
system.time( replicate(1000, apply(mm, c(1,2), function(x) sample(c(0,1),1)) ) ) # @recology_
system.time( replicate(1000, matrix(rbinom(10*5,1,.5),ncol=5,nrow=10) ) ) # @distribecology
system.time( replicate(1000, matrix(sample(0:1, m*n, replace=TRUE),m,n) ) ) # @revodavid & @hylospar
system.time( replicate(1000, round(matrix(runif(m*n), m, n)), ) ) # @zentree
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-30-making-matrices.Rmd")
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-30-making-matrices.Rmd")
mm <- matrix(0, 5, 10)
mm
mm <- matrix(0, 10, 5)
mm
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-30-making-matrices.Rmd")
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-30-ecology-unconference.Rmd")
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-30-ecology-unconference.Rmd")
