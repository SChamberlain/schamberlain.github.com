xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
data.frame(checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality"))
temp<-data.frame(checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality"))
temp
write.csv(temp, "asdf.csv")
write.csv(temp, "asdf.csv")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=4, what="invest")
checkconst(tocheck="SiteInfo.csv", coltoget=4, what="investigators")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SiteInfo.csv", coltoget=4, what="investigators")
#'
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- unique(read.csv(d_)[,3])
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SiteInfo.csv", coltoget=4, what="investigators")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SiteInfo.csv", coltoget=6, what="investigators")
#'
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- unique(read.csv(d_)[,3])
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="stateprovince"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "StateProvince.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SiteInfo.csv", coltoget=6, what="state")
checkconst(tocheck="SiteInfo.csv", coltoget=6, what="state")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SiteInfo.csv", coltoget=7, what="county")
#'
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince","county"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- unique(read.csv(d_)[,3])
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="stateprovince"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "StateProvince.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="county"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "County.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=8, what="county")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="munici")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="munici")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="munici")
checkconst(tocheck="SiteInfo.csv", coltoget=6, what="munici")
checkconst(tocheck="SiteInfo.csv", coltoget=6, what="munici")
checkconst(tocheck="SiteInfo.csv", coltoget=6, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
checkconst(tocheck="SiteInfo.csv", coltoget=7, what="municipality")
history()
library(ritis); library(taxize)
mynames <- c("shorea robusta", "pandanus patina", "oryza sativa", "durio zibethinus",
"rubus ulmifolius", "asclepias curassavica", "pistacia lentiscus")
gnr_resolve(names = c("Helianthus annuus", "Homo sapiens"), returndf = TRUE)
gnr_resolve(names = mynames, returndf = TRUE)
iplant_tnrsmatch(retrieve = 'all', taxnames = c('helianthus annuus', 'acacia', 'gossypium'), output = 'names')
gnr_resolve(names = 'helianthus annuuus', returndf = TRUE)
gnr_resolve(names = "helianthus annuuus", returndf = TRUE)
gnr_resolve(names = c("helianthus annuuus"), returndf = TRUE)
gnr_resolve(names = c("helianthus annuuus", "ad"), returndf=TRUE)
library(taxize)
itis_name(query="Poa annua", get="family")
gnr_resolve(names = c("helianthus annuuus", "ad"), returndf=TRUE)
gnr_resolve(names = c("Helianthus annuus", "Homo sapiens"), returndf = TRUE)
gnr_resolve(names = c("Asteraceae", "Plantae"), returndf=TRUE)
lapply(list('Helianthus debilis','Astragalus aduncus'), function(x) ubio_namebank(searchName = x, sci = 1, vern = 0))
mynames <- c("shorea robusta", "pandanus patina", "oryza sativa", "durio zibethinus",
"rubus ulmifolius", "asclepias curassavica", "pistacia lentiscus")
iplant_tnrsmatch(retrieve = 'all', taxnames = c('helianthus annuus', 'acacia', 'gossypium'), output = 'names')
gnr_resolve(names = c("Helianthus annuus", "Homo sapiens"), returndf = TRUE)
plants <- c("Myrcia lingua", "Myrcia bella", "Ocotea pulchella","Miconia", "Coffea arabica var. amarella", "Bleh")
plantminer(plants)
pageid <- eol_search('Pomatomus')$id[1] # first need to search for the taxon's page on EOL
out <- eol_pages(taxonconceptID=pageid) # then we nee to get the taxon ID used by EOL
eol_hierarchy(out[out$nameAccordingTo == "NCBI Taxonomy", "identifier"]) # then the hierarchy!
out
itis(36616, "getfullhierarchyfromtsn")
mytsn <- get_tsn("Quercus douglasii", "sciname")
mytsn
itis(mytsn, "getfullhierarchyfromtsn")
out
eol_hierarchy(out[out$nameAccordingTo == "Integrated Taxonomic Information System (ITIS)", "identifier"]) # and from ITIS
itis(mytsn, "getfullhierarchyfromtsn")
pageid <- eol_search('Quercus douglasi')$id[1] # first need to search for the taxon's page on EOL
out <- eol_pages(taxonconceptID=pageid) # then we nee to get the taxon ID used by EOL
out
pageid <- eol_search('Quercus douglasi')$id[1] # first need to search for the taxon's page on EOL
pageid
pageid <- eol_search('Quercus douglasii')$id[1] # first need to search for the taxon's page on EOL
pageid
out <- eol_pages(taxonconceptID=pageid) # then we nee to get the taxon ID used by EOL
out
eol_hierarchy(out[out$nameAccordingTo == "Species 2000 & ITIS Catalogue of Life: May 2012", "identifier"])
eol_hierarchy(out[out$nameAccordingTo == "Integrated Taxonomic Information System (ITIS)", "identifier"]) # and from ITIS
itis(mytsn, "getfullhierarchyfromtsn")
itis(mytsn, "gethierarchyupfromtsn")
classification(get_uid(c("Chironomus riparius", "aaa vva")))
classification(get_uid("Quercus douglasii"))
classification(get_tsn("Quercus douglasii"))
classification(get_uid("Chironomus riparius"))
classification(get_uid("Ornithorhynchus anatinus"))
splist <- c("Heliathus annuus","Abies procera","Poa annua","Platanus occidentalis",
"Carex abrupta","Arctostaphylos canescens","Ocimum basilicum","Vicia faba",
"Quercus kelloggii","Lactuca serriola")
tpl_search(taxon = splist)
get_seqs(taxon_name="Acipenser brevirostrum", gene = c("coi", "co1"),
seqrange = "1:3000", getrelated=T, writetodf=F)
names(get_seqs(taxon_name="Acipenser brevirostrum", gene = c("coi", "co1"),
seqrange = "1:3000", getrelated=T, writetodf=F))
out[names(out) %in% "sequence",]
out <- get_seqs(taxon_name="Acipenser brevirostrum", gene = c("coi", "co1"),
seqrange = "1:3000", getrelated=T, writetodf=F)
out[names(out) %in% "sequence",]
names(out)
out[,names(out) %in% "sequence"]
out[,!names(out) %in% "sequence"]
out <- get_seqs(taxon_name="Apis mellifera", gene = c("coi", "co1"),
seqrange = "1:3000", getrelated=T, writetodf=F)
out <- get_seqs(taxon_name="Acipenser brevirostrum", gene = c("5S rRNA"),
seqrange = "1:3000", getrelated=T, writetodf=F)
get_seqs
out
out[,!names(out) %in% "sequence"]
out <- get_genes_avail(taxon_name="Umbra limi", seqrange = "1:2000", getrelated=F)
unique(out$genesavail) # get list of genes available, removing non-unique ones
out[grep("RAG1", out$genesavail, ignore.case=T),] # does the string 'RAG1' exist in any of the gene names
out[grep("RAG1", out$genesavail, ignore.case=T),] # does the string 'RAG1' exist in any of the gene names
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-12-06-taxize.Rmd")
