"14551910") == TRUE){plos_alm_api <- 1} else
{plos_alm_api <- 0}
# OpenSNP API
if(identical(
content(GET(
"http://opensnp.org/snps/json/rs9939609/1.json"))$user$name, "Bastian Greshake") == TRUE)
{opensnp_api <- 1} else
{opensnp_api <- 0}
# ONe of the VertNet APIs
if(identical(
content(GET("http://canary.vert-net.appspot.com/api/search?genus=calidris&limit=1"))$records[[1]]$geodeticdatum
, "WGS84") == TRUE) {vertnet_api <- 1} else
{vertnet_api <- 0}
# Create data.frame of results from API checks
dat <- data.frame(
names = c("plos_search_api","plos_alm_api","opensnp_api","vertnet_api"),
values = c(plos_search_api, plos_alm_api, opensnp_api, vertnet_api))
p <- ggplot(dat, aes(names, values, colour=factor(values))) +
theme_bw(base_size=18) +
geom_point(size=16) +
scale_colour_manual(values = c("0" = "red","1" = "green")) +
coord_flip() +
labs(x="",y="") +
opts(legend.position="none", panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(), axis.text.x=theme_blank(),
axis.ticks=theme_blank(), panel.border = theme_blank())
print(p)
invisible();
}
apistatus()
rjson
# url_ok("http://api.plos.org/search?q=id:10.1371/journal.pbio.0000012")
# url_ok("http://alm.plos.org/articles/10.1371/journal.pbio.0000012.json")
# if(identical(plostitle('drosophila', 'title', 1, 'TRUE')[[2]][[1]][[1]],
# 						 "Identification of Drosophila MicroRNA Targets") == TRUE){plos_search_api <- 0} else
# 					{plos_search_api <- 1}
apistatus <- function() {
require(httr); require(rjson); require(ggplot2)
# PLoS search API
if(identical(
fromJSON(content(GET(
"http://api.plos.org/search?q=id:10.1371/journal.pbio.0000012&wt=json")))$response$docs[[1]]$eissn,
"1545-7885") == TRUE){plos_search_api <- 1} else
{plos_search_api <- 0}
# PLoS ALM API
if(identical(
content(GET(
"http://alm.plos.org/articles/10.1371/journal.pbio.0000012.json"))$article$pub_med,
"14551910") == TRUE){plos_alm_api <- 1} else
{plos_alm_api <- 0}
# OpenSNP API
if(identical(
content(GET(
"http://opensnp.org/snps/json/rs9939609/1.json"))$user$name, "Bastian Greshake") == TRUE)
{opensnp_api <- 1} else
{opensnp_api <- 0}
# ONe of the VertNet APIs
if(identical(
content(GET("http://canary.vert-net.appspot.com/api/search?genus=calidris&limit=1"))$records[[1]]$geodeticdatum
, "WGS84") == TRUE) {vertnet_api <- 1} else
{vertnet_api <- 0}
# Create data.frame of results from API checks
dat <- data.frame(
names = c("plos_search_api","plos_alm_api","opensnp_api","vertnet_api"),
values = c(plos_search_api, plos_alm_api, opensnp_api, vertnet_api))
p <- ggplot(dat, aes(names, values, colour=factor(values))) +
theme_bw(base_size=18) +
geom_point(size=16) +
scale_colour_manual(values = c("0" = "red","1" = "green")) +
coord_flip() +
labs(x="",y="") +
opts(legend.position="none", panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(), axis.text.x=theme_blank(),
axis.ticks=theme_blank(), panel.border = theme_blank())
print(p)
invisible();
}
apistatus()
# url_ok("http://api.plos.org/search?q=id:10.1371/journal.pbio.0000012")
# url_ok("http://alm.plos.org/articles/10.1371/journal.pbio.0000012.json")
# if(identical(plostitle('drosophila', 'title', 1, 'TRUE')[[2]][[1]][[1]],
# 						 "Identification of Drosophila MicroRNA Targets") == TRUE){plos_search_api <- 0} else
# 					{plos_search_api <- 1}
apistatus <- function() {
require(httr); require(RJSONIO); require(ggplot2)
# PLoS search API
if(identical(
RJSONIO::fromJSON(content(GET(
"http://api.plos.org/search?q=id:10.1371/journal.pbio.0000012&wt=json")))$response$docs[[1]]$eissn,
"1545-7885") == TRUE){plos_search_api <- 1} else
{plos_search_api <- 0}
# PLoS ALM API
if(identical(
httr::content(httr::GET(
"http://alm.plos.org/articles/10.1371/journal.pbio.0000012.json"))$article$pub_med,
"14551910") == TRUE){plos_alm_api <- 1} else
{plos_alm_api <- 0}
# OpenSNP API
if(identical(
httr::content(httr::GET(
"http://opensnp.org/snps/json/rs9939609/1.json"))$user$name, "Bastian Greshake") == TRUE)
{opensnp_api <- 1} else
{opensnp_api <- 0}
# ONe of the VertNet APIs
if(identical(
httr::content(httr::GET("http://canary.vert-net.appspot.com/api/search?genus=calidris&limit=1"))$records[[1]]$geodeticdatum
, "WGS84") == TRUE) {vertnet_api <- 1} else
{vertnet_api <- 0}
# Create data.frame of results from API checks
dat <- data.frame(
names = c("plos_search_api","plos_alm_api","opensnp_api","vertnet_api"),
values = c(plos_search_api, plos_alm_api, opensnp_api, vertnet_api))
p <- ggplot2::ggplot(dat, aes(names, values, colour=factor(values))) +
theme_bw(base_size=18) +
geom_point(size=16) +
scale_colour_manual(values = c("0" = "red","1" = "green")) +
coord_flip() +
labs(x="",y="") +
opts(legend.position="none", panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(), axis.text.x=theme_blank(),
axis.ticks=theme_blank(), panel.border = theme_blank())
print(p)
invisible();
}
apistatus()
RJSONIO::fromJSON
require(rjson)
apistatus <- function() {
require(httr); require(rjson); require(ggplot2)
# PLoS search API
if(identical(
rjson::fromJSON(httr::content(httr::GET(
"http://api.plos.org/search?q=id:10.1371/journal.pbio.0000012&wt=json")))$response$docs[[1]]$eissn,
"1545-7885") == TRUE){plos_search_api <- 1} else
{plos_search_api <- 0}
# PLoS ALM API
if(identical(
httr::content(httr::GET(
"http://alm.plos.org/articles/10.1371/journal.pbio.0000012.json"))$article$pub_med,
"14551910") == TRUE){plos_alm_api <- 1} else
{plos_alm_api <- 0}
# OpenSNP API
if(identical(
httr::content(httr::GET(
"http://opensnp.org/snps/json/rs9939609/1.json"))$user$name, "Bastian Greshake") == TRUE)
{opensnp_api <- 1} else
{opensnp_api <- 0}
# ONe of the VertNet APIs
if(identical(
httr::content(httr::GET("http://canary.vert-net.appspot.com/api/search?genus=calidris&limit=1"))$records[[1]]$geodeticdatum
, "WGS84") == TRUE) {vertnet_api <- 1} else
{vertnet_api <- 0}
# Create data.frame of results from API checks
dat <- data.frame(
names = c("plos_search_api","plos_alm_api","opensnp_api","vertnet_api"),
values = c(plos_search_api, plos_alm_api, opensnp_api, vertnet_api))
p <- ggplot2::ggplot(dat, aes(names, values, colour=factor(values))) +
theme_bw(base_size=18) +
geom_point(size=16) +
scale_colour_manual(values = c("0" = "red","1" = "green")) +
coord_flip() +
labs(x="",y="") +
opts(legend.position="none", panel.grid.major=theme_blank(),
panel.grid.minor=theme_blank(), axis.text.x=theme_blank(),
axis.ticks=theme_blank(), panel.border = theme_blank())
print(p)
invisible();
}
apistatus()
setwd("/Users/ScottMac/Dropbox/CANPOLIN_networks_ms/data") # change to your directory
dat <- read.csv("siteinfo_blog.csv")
head(dat)
levels(dat$ecosystem)
rep(c("oak","steppe", "prairie"), 2)
rep(c("oak","steppe", "prairie"), each=2)
rep(c("oak","steppe", "prairie"), each=8)
rnorm(24, mean=50)
lon = rnorm(24, mean=-124)
lon
rnorm(24, mean=-124, sd=4)
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=50), lon = rnorm(24, mean=-124, sd=4))
dat
canadamap <- data.frame(map("world", "Canada", plot=FALSE)[c("x","y")])
library(ggplot2); library(maps); library(maptools); library(gridExtra); library(rgeos)
canadamap <- data.frame(map("world", "Canada", plot=FALSE)[c("x","y")])
canadamapsmall <- canadamap[canadamap$x < -90 & canadamap$y < 54,]
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
b <- ggplot(dat, aes(lon, lat, colour=ecosystem)) +
theme_bw(base_size = 22) +
geom_jitter(size=4, alpha=0.6) +
geom_path(data = canadamapsmall, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.1,0.20), legend.text=theme_text(size=12, face='bold'),
legend.title=theme_text(size=12, face='bold'), legend.key = theme_blank(),
axis.ticks = theme_segment(size = 2)) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=52, sd=1), lon = rnorm(24, mean=-110, sd=4))
head(dat)
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
# The larger map, zoomed in, with the data
b <- ggplot(dat, aes(lon, lat, colour=ecosystem)) +
theme_bw(base_size = 22) +
geom_jitter(size=4, alpha=0.6) +
geom_path(data = canadamapsmall, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.1,0.20), legend.text=theme_text(size=12, face='bold'),
legend.title=theme_text(size=12, face='bold'), legend.key = theme_blank(),
axis.ticks = theme_segment(size = 2)) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=52, sd=1), lon = rnorm(24, mean=-113, sd=4))
head(dat)
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
# The larger map, zoomed in, with the data
b <- ggplot(dat, aes(lon, lat, colour=ecosystem)) +
theme_bw(base_size = 22) +
geom_jitter(size=4, alpha=0.6) +
geom_path(data = canadamapsmall, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.1,0.20), legend.text=theme_text(size=12, face='bold'),
legend.title=theme_text(size=12, face='bold'), legend.key = theme_blank(),
axis.ticks = theme_segment(size = 2)) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
set.seed(12323432)
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=52, sd=1), lon = rnorm(24, mean=-113, sd=4))
dat
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=52, sd=1), lon = rnorm(24, mean=-113, sd=4))
dat
dat <- data.frame(ecosystem = rep(c("oak","steppe", "prairie"), each=8),
lat = rnorm(24, mean=51, sd=1), lon = rnorm(24, mean=-113, sd=5))
head(dat)
```
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
# The larger map, zoomed in, with the data
b <- ggplot(dat, aes(lon, lat, colour=ecosystem)) +
theme_bw(base_size = 22) +
geom_jitter(size=4, alpha=0.6) +
geom_path(data = canadamapsmall, aes(x, y), colour = "black", fill = "white") +
scale_size(guide="none") +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.1,0.20), legend.text=theme_text(size=12, face='bold'),
legend.title=theme_text(size=12, face='bold'), legend.key = theme_blank(),
axis.ticks = theme_segment(size = 2)) +
labs(x = '', y = '')
```
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
range(canadamapsmall$x)
range(canadamapsmall$y)
canadamapsmall$y
canadamapsmall$x
canadamap$x
canadamapsmall[1:50,]
na.omit(canadamapsmall)
canadamapsmall <- na.omit(canadamapsmall)
range(canadamapsmall)
range(canadamapsmall$x)
range(canadamapsmall$y)
a
canadamapsmall <- canadamap[canadamap$x < -90 & canadamap$y < 54,]
canadamapsmall_ <- na.omit(canadamapsmall)
c(range(canadamapsmall_$x), range(canadamapsmall_$y))
data.frame(x = range(canadamapsmall_$x), y = range(canadamapsmall_$y))
head(canadamapsmall_)
data.frame(x = range(canadamapsmall_$x), y = range(canadamapsmall_$y))
insetrect <- data.frame(x = range(canadamapsmall_$x), y = range(canadamapsmall_$y))
a + geom_path(data = insetrect, aes(x, y), colour = "black", fill = "white")
a + geom_polygon(data = insetrect, aes(x, y), colour = "black", fill = "white")
range(canadamapsmall_$x)
rev(range(canadamapsmall_$x))
c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x)))
c(range(canadamapsmall_$y), rev(range(canadamapsmall_$y)))
data.frame(x = c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x))),
y = c(range(canadamapsmall_$y), rev(range(canadamapsmall_$y))))
data.frame(x = c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x))),
y = c(rev(range(canadamapsmall_$y)), range(canadamapsmall_$y)))
data.frame(x = c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x))),
y = c(range(canadamapsmall_$y), range(canadamapsmall_$y)))
insetrect <- data.frame(x = c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x))),
y = c(range(canadamapsmall_$y), range(canadamapsmall_$y)))
a + geom_polygon(data = insetrect, aes(x, y), colour = "black", fill = "white")
id = 1:4
id
insetrect <- data.frame(id = 1:4,
x = c(range(canadamapsmall_$x), rev(range(canadamapsmall_$x))),
y = c(range(canadamapsmall_$y), range(canadamapsmall_$y)))
insetrect
a + geom_polygon(data = insetrect, aes(x, y, group=id), colour = "black", fill = "white")
a + geom_path(data = insetrect, aes(x, y, group=id), colour = "black", fill = "white")
a + geom_segment(data = insetrect, aes(xend = x, yend = y), colour = "black")
df <- data.frame(
x = sample(10, 20, replace = TRUE),
y = sample(10, 20, replace = TRUE)
)
df
ggplot(df, aes(xmin = x, xmax = x + 1, ymin = y, ymax = y + 2)) +
geom_rect()
insetrect
a + geom_rect(data = insetrect, aes(xmin = x, xmax = x, ymin = y, ymax = y))
a + geom_rect(data = insetrect, aes(xmin = x, xmax = y, ymin = y, ymax = y))
a + geom_rect(data = insetrect, aes(xmin = x, xmax = x+1, ymin = y, ymax = y))
ggplot(insetrect) +
geom_rect(aes(xmin = x, xmax = x+1, ymin = y, ymax = y))
geom_rect(aes(xmin = x, xmax = x+1, ymin = y, ymax = y+1))
ggplot(insetrect) +
geom_rect(aes(xmin = x, xmax = x+1, ymin = y, ymax = y+1))
insetrect <- data.frame(ymin = 48.04721, ymax = 53.99915, xmin = -133.09752, xmax = -90.38942)
insetrect
ggplot(insetrect) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax))
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill="white")
ggplot(insetrect) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill="white")
ggplot(insetrect) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0)
ggplot(insetrect) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="black")
max(canadamapsmall_$y)
max(canadamapsmall_$x)
min(canadamapsmall_$y)
insetrect <- data.frame(xmin = min(canadamapsmall_$x), xmax = max(canadamapsmall_$x),
ymin = min(canadamapsmall_$y), ymax = max(canadamapsmall_$y))
insetrect
ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="black")
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="red")
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="red", size = 1)
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="red", size = 2)
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="red", size = 2)
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="red", size = 2) +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="blue", size = 2, linetype=2) +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="blue", size = 2, linetype=2) +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
a <- ggplot(canadamap) +
theme_bw(base_size = 22) +
geom_path(data = canadamap, aes(x, y), colour = "black", fill = "white") +
geom_rect(data = insetrect, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), alpha=0, colour="blue", size = 1, linetype=1) +
opts(panel.border = theme_rect(colour = 'black', size = 1, linetype=1),
panel.grid.major = theme_blank(), panel.grid.minor=theme_blank(),
panel.background = theme_rect( fill = 'white'),
legend.position = c(0.15,0.80), legend.key = theme_blank(),
axis.ticks = theme_blank(), axis.text.x=theme_blank(),
axis.text.y=theme_blank()) +
labs(x = '', y = '')
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5) # the larger map
vpa_ <- viewport(width = 0.4, height = 0.4, x = 0.8, y = 0.8) # the inset in upper right
print(b, vp = vpb_)
print(a, vp = vpa_)
setwd("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_posts")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-08-22-ggplot-inset-map.Rmd")
