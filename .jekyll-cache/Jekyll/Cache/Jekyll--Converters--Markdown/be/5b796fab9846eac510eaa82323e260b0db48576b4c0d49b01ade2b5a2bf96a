I"Y&<p><strong>UPDATE</strong> As you can see in Patrick’s comment below you can convert to GeoJSON format files with rgdal as an alternative to calling the Ogre web API described below. See <a href="https://github.com/patperu/write2geojson/blob/master/write-geojson.R">here</a> for example code for converting to GeoJSON with rgdal.</p>

<hr />

<p>GitHub recently introduced the ability to render <a href="http://en.wikipedia.org/wiki/GeoJSON">GeoJSON</a> files on their site as maps <a href="https://github.com/blog/1528-there-s-a-map-for-that">here</a>, and recently introduced <a href="https://github.com/blog/1541-geojson-rendering-improvements">here</a> support for <a href="https://github.com/mbostock/topojson">TopoJSON</a>, an extension of GeoJSON can be up to 80% smaller than GeoJSON, support for other file extensions (<code class="highlighter-rouge">.topojson</code> and <code class="highlighter-rouge">.json</code>), and you can embed the maps on other sites (so awesome). The underlying maps used on GitHub are <a href="http://www.openstreetmap.org/">Openstreet Maps</a>.</p>

<p>A recent blog post showed how to convert .shp or .kml files to GeoJSON to then upload to GitHub <a href="http://ben.balter.com/2013/06/26/how-to-convert-shapefiles-to-geojson-for-use-on-github/">here</a>. The approach used Ruby on the command line locally to convert the geospatial files to GeoJSON.</p>

<p>Can we do this in R? Perhaps others have already done this, but there’s more than one way to do anything, no?</p>

<p>I’m not aware of a converter to GeoJSON within R, but there is a web service that can do this, called <a href="http://ogre.adc4gis.com/">Ogre</a>. The service lets you <code class="highlighter-rouge">POST</code> a file, which then converts to GeoJSON and gives it back to you. Ogre accepts many different file formats: BNA, CSV, DGN, DXF, zipped shapefiles, GeoConcept, GeoJSON, GeoRSS, GML, GMT, KML, MapInfo, and VRT.</p>

<p>We can use the Ogre API to upload a local geospatial file of various formats and get the GeoJSON back, then put it up on GitHub, and they render the map for you. Sweetness.</p>

<p>So here’s the protocol.</p>

<hr />

<h3 id="1-load-httr-what-is-httr-for-those-not-in-the-know-it-is-a-simpler-wrapper-around-rcurl-a-curl-interface-for-r">1. Load httr. What is httr? For those not in the know it is a simpler wrapper around RCurl, a curl interface for R.</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># install.packages('httr')</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">httr</span><span class="p">)</span></code></pre></figure>

<h3 id="2-here-is-a-function-to-convert-your-geospatial-files-to-geojson-with-roxygen-docs">2. Here is a function to convert your geospatial files to GeoJSON (with roxygen docs).</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">togeojson</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="n">writepath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"~"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"http://ogre.adc4gis.com/convert"</span><span class="w">
    </span><span class="n">tt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">POST</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">upload</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">upload_file</span><span class="p">(</span><span class="n">file</span><span class="p">)))</span><span class="w">
    </span><span class="n">out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">content</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span><span class="w"> </span><span class="n">as</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"text"</span><span class="p">)</span><span class="w">
    </span><span class="n">fileConn</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">file</span><span class="p">(</span><span class="n">writepath</span><span class="p">)</span><span class="w">
    </span><span class="n">writeLines</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="n">fileConn</span><span class="p">)</span><span class="w">
    </span><span class="n">close</span><span class="p">(</span><span class="n">fileConn</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<h3 id="3-convert-a-file-to-geojson">3. Convert a file to GeoJSON</h3>

<p><strong>KML</strong></p>

<p>In the first line I specify the location of the file on my machine. In the second line the function <code class="highlighter-rouge">togeojson</code> reads in the file, sends the file to the API endpoint <em>http://ogre.adc4gis.com/convert</em>, collects the returned GeoJSON object, and saves the GeoJSON to a file that you specify. Here we are converting a KML file with point occurrences (data collected from <a href="http://bison.usgs.ornl.gov/">USGS’s BISON service</a>).</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"~/github/sac/rgeojson/acer_spicatum.kml"</span><span class="w">
</span><span class="n">togeojson</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s2">"~/github/sac/rgeojson/acer_spicatum.geojson"</span><span class="p">)</span></code></pre></figure>

<p><strong>Shapefiles</strong></p>

<p>Here, we are converting a zip file containing shape files for <em>Pinus contorta</em> (data collected from the USGS <a href="http://esp.cr.usgs.gov/data/little/">here</a>.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"~/github/sac/rgeojson/pinucont.zip"</span><span class="w">
</span><span class="n">togeojson</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s2">"~/github/sac/rgeojson/pinus.geojson"</span><span class="p">)</span></code></pre></figure>

<h3 id="4-then-commit-and-push-to-github-and-this-is-what-they-look-like-on-github">4. Then commit and push to GitHub. And this is what they look like on GitHub</h3>

<p><em>Acer spicatum</em> distribution (points)</p>

<!-- ![](/public/img/acer_spiacdtum_dist.png) -->
<script src="https://embed.github.com/view/geojson/sckott/rgeojson/output/acer_spicatum.geojson"></script>

<p><em>Pinus contorta</em> distribution (polygons)</p>

<!-- ![](/public/img/pinus_dist.png) -->
<script src="https://embed.github.com/view/geojson/sckott/rgeojson/output/pinus.geojson"></script>

<hr />

<p>If you want, you can clone a repo from my account. Then do the below. (of course, you must have git installed, and have a GitHub account…)</p>

<p>First, fork my <code class="highlighter-rouge">rgeojson</code> repo <a href="https://github.com/sckott/rgeojson">here</a> to your GitHub account.</p>

<p>Second, in your terminal/command line…</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git clone https://github.com/&lt;yourgithubusername&gt;/rgeojson.git
<span class="nb">cd </span>rgeojson</code></pre></figure>

<p>Third, in R specify the location of either the KML file or the zipped shape files, then call <code class="highlighter-rouge">togeojson</code> function to convert the KML file to a GeoJSON file (which should output a file <em>acer_spicatum.geojson</em>)</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"/path/to/acer_spicatum.kml"</span><span class="w">
</span><span class="n">togeojson</span><span class="p">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s2">"~/path/to/write/to/acer_spicatum.geojson"</span><span class="p">)</span></code></pre></figure>

<p>Fourth, back in the terminal…</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git add acer_spicatum.geojson
git commit <span class="nt">-a</span> <span class="nt">-m</span> <span class="s1">'some cool commit message'</span>
git push</code></pre></figure>

<p>Fifth, go to your <em>rgeojson</em> repo on GitHub and click on the <em>acer_spicatum.geojson</em> file, and the map should render.</p>

<hr />

<p>Look for this functionality to come to the <a href="https://github.com/ropensci/rbison">rbison</a> and <a href="https://github.com/ropensci/rgbif">rgbif</a> R packages soon. Why is that cool?  Think of the workflow: Query for species occurrence data in the BISON or GBIF databases, convert the results to a GeoJSON file, push to GitHub, and you have an awesome interactive map on the web. Not too bad eh.</p>

:ET