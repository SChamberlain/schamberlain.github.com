I"=<p>So I was trying to figure out a fast way to make matrices with randomly allocated 0 or 1 in each cell of the matrix. I reached out on Twitter, and got many responses (thanks tweeps!).</p>

<h3 id="here-is-the-solution-i-came-up-with">Here is the solution I came up with.</h3>

<p>See if you can tell why it would be slow.</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">apply</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="m">1</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">      [,1] [,2] [,3] [,4] [,5]
 [1,]    1    0    1    0    1
 [2,]    0    0    1    1    1
 [3,]    0    0    0    0    1
 [4,]    0    1    1    0    1
 [5,]    0    1    1    1    1
 [6,]    1    0    1    1    1
 [7,]    0    1    0    1    0
 [8,]    0    0    1    0    1
 [9,]    1    0    1    1    1
[10,]    1    0    0    1    1</code></pre></figure>

<h3 id="ted-hart-distribecology-replied-first-with">Ted Hart (@distribecology) replied first with:</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">matrix</span><span class="p">(</span><span class="n">rbinom</span><span class="p">(</span><span class="m">10</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">0.5</span><span class="p">),</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">      [,1] [,2] [,3] [,4] [,5]
 [1,]    1    1    0    1    1
 [2,]    1    0    0    1    0
 [3,]    0    1    0    0    0
 [4,]    0    0    1    0    0
 [5,]    1    0    1    0    0
 [6,]    0    0    0    0    1
 [7,]    1    0    0    0    0
 [8,]    0    1    0    1    0
 [9,]    1    1    1    1    0
[10,]    0    1    1    0    0</code></pre></figure>

<h3 id="next-david-smith-revodavid-and-rafael-maia-hylospar-came-up-with-about-the-same-solution">Next, David Smith (@revodavid) and Rafael Maia (@hylospar) came up with about the same solution.</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">matrix</span><span class="p">(</span><span class="n">sample</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">      [,1] [,2] [,3] [,4] [,5]
 [1,]    0    0    0    0    1
 [2,]    0    0    0    0    0
 [3,]    0    1    1    0    1
 [4,]    1    0    0    1    0
 [5,]    0    0    0    0    1
 [6,]    1    0    1    1    1
 [7,]    1    1    1    1    0
 [8,]    0    0    0    1    1
 [9,]    1    0    0    0    1
[10,]    0    1    0    1    1</code></pre></figure>

<h3 id="then-there-was-the-solution-by-luis-apiolaza-zentree">Then there was the solution by Luis Apiolaza (@zentree).</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="nf">round</span><span class="p">(</span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">      [,1] [,2] [,3] [,4] [,5]
 [1,]    0    1    1    0    0
 [2,]    1    0    1    1    0
 [3,]    1    0    1    0    0
 [4,]    1    0    0    0    1
 [5,]    1    0    1    1    0
 [6,]    1    0    0    0    0
 [7,]    1    0    0    0    0
 [8,]    1    1    1    0    0
 [9,]    0    0    0    0    1
[10,]    1    0    0    1    1</code></pre></figure>

<h3 id="last-a-solution-was-proposed-using-rcpparmadillo-but-i-couldnt-get-it-to-work-on-my-machine-but-here-is-the-function-anyway-if-someone-can">Last, a solution was proposed using <code class="highlighter-rouge">RcppArmadillo</code>, but I couldnâ€™t get it to work on my machine, but here is the function anyway if someone can.</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">library</span><span class="p">(</span><span class="n">inline</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">RcppArmadillo</span><span class="p">)</span><span class="w">
</span><span class="n">f</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cxxfunction</span><span class="p">(</span><span class="n">body</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"return wrap(arma::randu(5,10));"</span><span class="p">,</span><span class="w"> </span><span class="n">plugin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"RcppArmadillo"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="and-here-is-the-comparison-of-systemtime-for-each-solution">And here is the comparison of system.time for each solution.</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">mm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">m</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">

</span><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="m">1</span><span class="p">))))</span><span class="w">  </span><span class="c1"># @recology_</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed
  0.470   0.002   0.471</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">rbinom</span><span class="p">(</span><span class="m">10</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">0.5</span><span class="p">),</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">)))</span><span class="w">  </span><span class="c1"># @distribecology</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed
  0.014   0.000   0.015</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">sample</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)))</span><span class="w">  </span><span class="c1"># @revodavid &amp; @hylospar</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed
  0.015   0.000   0.014</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="nf">round</span><span class="p">(</span><span class="n">matrix</span><span class="p">(</span><span class="n">runif</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">)),</span><span class="w"> </span><span class="p">))</span><span class="w">  </span><span class="c1"># @zentree</span>
</pre></td></tr></tbody></table></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed
  0.014   0.000   0.014</code></pre></figure>

<h3 id="if-you-want-to-take-the-time-to-learn-c-or-already-know-it-the-rcpparmadillo-option-would-likely-be-the-fastest-but-i-think-imo-for-many-scientists-especially-ecologists-we-probably-dont-already-know-c-so-will-stick-to-the-next-fastest-options">If you want to take the time to learn C++ or already know it, the RcppArmadillo option would likely be the fastest, but I think (IMO) for many scientists, especially ecologists, we probably donâ€™t already know C++, so will stick to the next fastest options.</h3>

<h3 id="get-the-rmd-file-used-to-create-this-post-at-my-github-account">Get the .Rmd file used to create this post <a href="https://github.com/sckott/sckott.github.com/tree/master/_drafts/2012-08-30-making-matrices.Rmd">at my github account</a>.</h3>

<h3 id="written-in-markdown-with-help-from-knitr-and-nice-knitr-highlightingetc-in-in-rstudio">Written in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, with help from <a href="http://yihui.name/knitr/">knitr</a>, and nice knitr highlighting/etc. in in <a href="http://rstudio.org/">RStudio</a>.</h3>
:ET