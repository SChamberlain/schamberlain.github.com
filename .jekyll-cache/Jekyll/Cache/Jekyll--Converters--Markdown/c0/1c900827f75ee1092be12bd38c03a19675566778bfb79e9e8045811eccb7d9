I"dq<p>I’m sure there’s already a way to do this, but here goes. OR maybe this is an 
anti-pattern. Either way, this is me, asking the stupid question.</p>

<p>I ran into this a few hours ago:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Sys.unsetenv</span><span class="p">(</span><span class="s2">"ENTREZ_KEY"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">brranching</span><span class="p">)</span><span class="w">
</span><span class="n">mynames</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Poa annua"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Salix goodingii"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Helianthus annuus"</span><span class="p">)</span><span class="w">
</span><span class="n">phylomatic_names</span><span class="p">(</span><span class="n">taxa</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mynames</span><span class="p">,</span><span class="w"> </span><span class="n">format</span><span class="o">=</span><span class="s1">'rsubmit'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">No</span><span class="w"> </span><span class="n">ENTREZ</span><span class="w"> </span><span class="n">API</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="n">provided</span><span class="w">
 </span><span class="n">Get</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="n">via</span><span class="w"> </span><span class="n">taxize</span><span class="o">::</span><span class="n">use_entrez</span><span class="p">()</span><span class="w">
 </span><span class="n">See</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">ncbiinsights.ncbi.nlm.nih.gov</span><span class="o">/</span><span class="m">2017</span><span class="o">/</span><span class="m">11</span><span class="o">/</span><span class="m">02</span><span class="o">/</span><span class="n">new</span><span class="o">-</span><span class="n">api</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="k">for</span><span class="o">-</span><span class="n">the</span><span class="o">-</span><span class="n">e</span><span class="o">-</span><span class="n">utilities</span><span class="o">/</span><span class="w">

</span><span class="n">No</span><span class="w"> </span><span class="n">ENTREZ</span><span class="w"> </span><span class="n">API</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="n">provided</span><span class="w">
 </span><span class="n">Get</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="n">via</span><span class="w"> </span><span class="n">taxize</span><span class="o">::</span><span class="n">use_entrez</span><span class="p">()</span><span class="w">
 </span><span class="n">See</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">ncbiinsights.ncbi.nlm.nih.gov</span><span class="o">/</span><span class="m">2017</span><span class="o">/</span><span class="m">11</span><span class="o">/</span><span class="m">02</span><span class="o">/</span><span class="n">new</span><span class="o">-</span><span class="n">api</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="k">for</span><span class="o">-</span><span class="n">the</span><span class="o">-</span><span class="n">e</span><span class="o">-</span><span class="n">utilities</span><span class="o">/</span><span class="w">

</span><span class="n">No</span><span class="w"> </span><span class="n">ENTREZ</span><span class="w"> </span><span class="n">API</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="n">provided</span><span class="w">
 </span><span class="n">Get</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="n">via</span><span class="w"> </span><span class="n">taxize</span><span class="o">::</span><span class="n">use_entrez</span><span class="p">()</span><span class="w">
 </span><span class="n">See</span><span class="w"> </span><span class="n">https</span><span class="o">://</span><span class="n">ncbiinsights.ncbi.nlm.nih.gov</span><span class="o">/</span><span class="m">2017</span><span class="o">/</span><span class="m">11</span><span class="o">/</span><span class="m">02</span><span class="o">/</span><span class="n">new</span><span class="o">-</span><span class="n">api</span><span class="o">-</span><span class="n">keys</span><span class="o">-</span><span class="k">for</span><span class="o">-</span><span class="n">the</span><span class="o">-</span><span class="n">e</span><span class="o">-</span><span class="n">utilities</span><span class="o">/</span><span class="w">


</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="s2">"poaceae%2Fpoa%2Fpoa_annua"</span><span class="w">                   </span><span class="s2">"salicaceae%2Fsalix%2Fsalix_goodingii"</span><span class="w">        </span><span class="s2">"asteraceae%2Fhelianthus%2Fhelianthus_annuus"</span><span class="w">
</span></code></pre></div></div>

<p>The <a href="https://github.com/ropensci/brranching/">brranching</a> package uses the <a href="https://github.com/ropensci/taxize/">taxize</a> package internally, calling it’s function 
<code class="highlighter-rouge">taxize::tax_name()</code>. The <code class="highlighter-rouge">taxize::tax_name()</code> function throws useful messages to the user
if their NCBI Entrez API key is not found, and gives them instructions on how to find it.</p>

<p>However, the user does not have to get an API key. If they don’t they then get subjected
to lots of repeats of the same message.</p>

<p>I wondered if there’s anything that could be done about this. That is, if the same 
message is going to be thrown that was already thrown within a function call, just skip 
additional messages that are the same.</p>

<p>There is of course <code class="highlighter-rouge">suppressMessages()</code> for messages, but in package development if you
do want a user to see a message, you don’t want to suppress messages. <code class="highlighter-rouge">suppressMessages</code>
is too blunt of an instrument for this use case.</p>

<h2 id="the-code">the code</h2>

<p><code class="highlighter-rouge">with_mssgs()</code> captures values and messages, suppressing the message</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">with_mssgs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">my_mssgs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
  </span><span class="n">w_handler</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">w</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">my_mssgs</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">my_mssgs</span><span class="p">,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">w</span><span class="p">))</span><span class="w">
    </span><span class="n">invokeRestart</span><span class="p">(</span><span class="s2">"muffleMessage"</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">val</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">withCallingHandlers</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span><span class="w"> </span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">w_handler</span><span class="p">)</span><span class="w">
  </span><span class="nf">list</span><span class="p">(</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">val</span><span class="p">,</span><span class="w"> </span><span class="n">messages</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">my_mssgs</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">MessageKeeper</code> is a little <a href="https://cran.rstudio.com/web/packages/R6/">R6</a> class to handle messages, matching, and 
simple checks to see if messages have been used or not.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">R6</span><span class="p">)</span><span class="w">
</span><span class="n">MessageKeeper</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">R6</span><span class="o">::</span><span class="n">R6Class</span><span class="p">(</span><span class="s2">"MessageKeeper"</span><span class="p">,</span><span class="w">
  </span><span class="n">public</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
    </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w">
    </span><span class="n">print</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">cat</span><span class="p">(</span><span class="s1">'MessageKeeper'</span><span class="p">,</span><span class="w"> </span><span class="n">sep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"\n"</span><span class="p">)</span><span class="w">
      </span><span class="n">cat</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s1">' messages: '</span><span class="p">,</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">)))</span><span class="w">
      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">cat</span><span class="p">(</span><span class="s2">"\n"</span><span class="p">)</span><span class="w">
        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="n">cat</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s2">"  "</span><span class="p">,</span><span class="w"> </span><span class="n">substring</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">50</span><span class="p">)))</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="n">add</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="w">
      </span><span class="nf">invisible</span><span class="p">(</span><span class="n">self</span><span class="p">)</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="n">remove</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">self</span><span class="o">$</span><span class="nf">length</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="nf">return</span><span class="p">(</span><span class="kc">NULL</span><span class="p">)</span><span class="w">
      </span><span class="n">head</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="w">
      </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="p">[</span><span class="m">-1</span><span class="p">]</span><span class="w">
      </span><span class="n">head</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="n">purge</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="n">thrown_already</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">x</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">self</span><span class="o">$</span><span class="n">bucket</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="n">not_thrown_yet</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="o">!</span><span class="n">self</span><span class="o">$</span><span class="n">thrown_already</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>MessageKeeper examples</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mssger</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">MessageKeeper</span><span class="o">$</span><span class="n">new</span><span class="p">()</span><span class="w">
</span><span class="n">mssger</span><span class="w">
</span><span class="c1">#&gt; MessageKeeper</span><span class="w">
</span><span class="c1">#&gt;  messages: 0</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">add</span><span class="p">(</span><span class="s2">"one"</span><span class="p">)</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">add</span><span class="p">(</span><span class="s2">"two"</span><span class="p">)</span><span class="w">
</span><span class="n">mssger</span><span class="w">
</span><span class="c1">#&gt; MessageKeeper</span><span class="w">
</span><span class="c1">#&gt;  messages: 2</span><span class="w">
</span><span class="c1">#&gt;   one  two</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">thrown_already</span><span class="p">(</span><span class="s2">"one"</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] TRUE</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">thrown_already</span><span class="p">(</span><span class="s2">"bears"</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] FALSE</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">not_thrown_yet</span><span class="p">(</span><span class="s2">"bears"</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] TRUE</span><span class="w">
</span><span class="n">mssger</span><span class="o">$</span><span class="n">purge</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">handle_mssgs()</code> is a function you wrap your target function in to 
handle the messages</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">handle_mssgs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">res</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">with_mssgs</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="nf">is.null</span><span class="p">(</span><span class="n">res</span><span class="o">$</span><span class="n">messages</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c1"># if not thrown yet, add to bucket and throw it</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">my_mssger</span><span class="o">$</span><span class="n">not_thrown_yet</span><span class="p">(</span><span class="n">res</span><span class="o">$</span><span class="n">messages</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">message</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="n">my_mssger</span><span class="o">$</span><span class="n">add</span><span class="p">(</span><span class="n">res</span><span class="o">$</span><span class="n">messages</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">message</span><span class="p">)</span><span class="w">
      </span><span class="n">message</span><span class="p">(</span><span class="n">res</span><span class="o">$</span><span class="n">messages</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="o">$</span><span class="n">message</span><span class="p">)</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">res</span><span class="o">$</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Set up the message keeper</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_mssger</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">MessageKeeper</span><span class="o">$</span><span class="n">new</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">squared()</code> squares a numeric value and returns it, throwing a message if 
it’s greater than 20</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">squared</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">stopifnot</span><span class="p">(</span><span class="nf">is.numeric</span><span class="p">(</span><span class="n">x</span><span class="p">))</span><span class="w">
  </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">x</span><span class="o">^</span><span class="m">2</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">20</span><span class="p">)</span><span class="w"> </span><span class="n">message</span><span class="p">(</span><span class="s2">"woops, &gt; than 20! check your numbers"</span><span class="p">)</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">y</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">foo()</code> runs any vector of numbers through <code class="highlighter-rouge">squared()</code> using <code class="highlighter-rouge">vapply()</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">vapply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w"> </span><span class="n">squared</span><span class="p">(</span><span class="n">z</span><span class="p">),</span><span class="w"> </span><span class="n">numeric</span><span class="p">(</span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">bar()</code> does the same, but uses our MessageKeeper thingy</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bar</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="c1"># tear down on exit</span><span class="w">
  </span><span class="nf">on.exit</span><span class="p">(</span><span class="n">my_mssger</span><span class="o">$</span><span class="n">purge</span><span class="p">())</span><span class="w">
  </span><span class="n">vapply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">z</span><span class="p">)</span><span class="w"> </span><span class="n">handle_mssgs</span><span class="p">(</span><span class="n">squared</span><span class="p">(</span><span class="n">z</span><span class="p">)),</span><span class="w"> </span><span class="n">numeric</span><span class="p">(</span><span class="m">1</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">foo()</code> annoyingly throws a message for every instance possible</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foo</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">20</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt;  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289</span><span class="w">
</span><span class="c1">#&gt; [18] 324 361 400</span><span class="w">
</span></code></pre></div></div>

<p>while <code class="highlighter-rouge">bar()</code> only throws the message once</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bar</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">20</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; woops, &gt; than 20! check your numbers</span><span class="w">
</span><span class="c1">#&gt;  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289</span><span class="w">
</span><span class="c1">#&gt; [18] 324 361 400</span><span class="w">
</span></code></pre></div></div>

:ET