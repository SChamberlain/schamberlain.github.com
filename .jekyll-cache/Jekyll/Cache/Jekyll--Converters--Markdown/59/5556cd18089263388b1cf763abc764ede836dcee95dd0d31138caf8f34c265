I"><p><code class="highlighter-rouge">hoardr</code> is a client for caching files and managing those files.</p>

<p>You can definitely achieve the same tasks without a separate pacakge, and there’s 
a number of packages for caching various objects in R already. However, 
I didn’t think there was a tool for that did everything I needed.</p>

<p>The use cases I typically need <code class="highlighter-rouge">hoardr</code> for are when dealing with large files,
either text (e.g., csv) or binary (e.g., shp) files that would be nice to not 
make the user of packages I maintain download again if they already have the 
file. This makes the server’s life easier that’s serving the files and makes 
work faster for the user of my package.</p>

<p>Given the existence of the awesome <a href="https://github.com/r-lib/R6">R6</a>, <code class="highlighter-rouge">hoardr</code> becomes simple to use 
inside of other packages. Namely, <code class="highlighter-rouge">hoardr</code> can export just a single object 
that another package has to import, then we can call methods on that object, instead
of having to import loads of functions.</p>

<h2 id="install">Install</h2>

<p>From CRAN</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"hoardr"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Dev version</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"ropensci/hoardr"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"hoardr"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="package-api">Package API</h2>

<p>There’s only a single exported object: <code class="highlighter-rouge">hoard</code>. This is a normal function, although
is a lite wrapper around the R6 class <code class="highlighter-rouge">HoardClient</code>, which contains all the 
smarts.</p>

<h2 id="example-usage">Example usage</h2>

<p>Initialze an object</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">hoard</span><span class="p">())</span><span class="w">
</span><span class="c1">#&gt; &lt;hoard&gt; </span><span class="w">
</span><span class="c1">#&gt;   path: </span><span class="w">
</span><span class="c1">#&gt;   cache path: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span><span class="w">
</span></code></pre></div></div>

<p>After making the object with <code class="highlighter-rouge">hoardr()</code>, it’s good to set a cache path. Here, 
we’ll use a temporary directoy, which we can set by doing <code class="highlighter-rouge">type = "tempdir"</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="n">cache_path_set</span><span class="p">(</span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"foobar"</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'tempdir'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar"</span><span class="w">
</span></code></pre></div></div>

<p>Now our cache path is set to a temp dir</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="w">
</span><span class="c1">#&gt; &lt;hoard&gt; </span><span class="w">
</span><span class="c1">#&gt;   path: foobar</span><span class="w">
</span><span class="c1">#&gt;   cache path: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span><span class="w">
</span></code></pre></div></div>

<p>And we can request the base cache path as well</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar"</span><span class="w">
</span></code></pre></div></div>

<p>The next thing you’ll likely want to do is create that base directory since 
setting the path doesn’t create the directory:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="n">mkdir</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p>What files are in the directory (hint: there shouldn’t be any):</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; character(0)</span><span class="w">
</span></code></pre></div></div>

<p>Let’s put a file in the cache</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">10000L</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">(),</span><span class="w"> </span><span class="s2">"foo.txt"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Now see what’s in there</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt"</span><span class="w">
</span></code></pre></div></div>

<p>While <code class="highlighter-rouge">list()</code> method lists full file paths, we can get more details with the <code class="highlighter-rouge">details()</code> method:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="n">details</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; &lt;cached files&gt;</span><span class="w">
</span><span class="c1">#&gt;   directory: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;   file: /foo.txt</span><span class="w">
</span><span class="c1">#&gt;   size: 0.049 mb</span><span class="w">
</span></code></pre></div></div>

<p>You can delete files by name:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="o">$</span><span class="n">delete</span><span class="p">(</span><span class="s2">"foo.txt"</span><span class="p">)</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; character(0)</span><span class="w">
</span></code></pre></div></div>

<p>As well as delete all files:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat</span><span class="p">(</span><span class="s2">"one\ntwo\nthree"</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">(),</span><span class="w"> </span><span class="s2">"foo.txt"</span><span class="p">))</span><span class="w">
</span><span class="n">cat</span><span class="p">(</span><span class="s2">"asdfasdf asd fasdf"</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">(),</span><span class="w"> </span><span class="s2">"bar.txt"</span><span class="p">))</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/bar.txt"</span><span class="w">
</span><span class="c1">#&gt; [2] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt"</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="n">delete_all</span><span class="p">()</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; character(0)</span><span class="w">
</span></code></pre></div></div>

<p>There’s also methods for compressing and uncompressing all the files in your cache:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat</span><span class="p">(</span><span class="s2">"one\ntwo\nthree"</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">(),</span><span class="w"> </span><span class="s2">"foo.txt"</span><span class="p">))</span><span class="w">
</span><span class="n">cat</span><span class="p">(</span><span class="s2">"asdfasdf asd fasdf"</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_get</span><span class="p">(),</span><span class="w"> </span><span class="s2">"bar.txt"</span><span class="p">))</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="n">compress</span><span class="p">()</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/compress.zip"</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="n">uncompress</span><span class="p">()</span><span class="w">
</span><span class="n">x</span><span class="o">$</span><span class="nf">list</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/bar.txt"</span><span class="w">
</span><span class="c1">#&gt; [2] "/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt"</span><span class="w">
</span></code></pre></div></div>

<p><br /><br /></p>

<h2 id="how-to-use-in-a-package">How to use in a package</h2>

<p>I already use <code class="highlighter-rouge">hoardr</code> in five R packages I maintain: <a href="https://github.com/ropensci/crminer">crminer</a>, <a href="https://github.com/ropensci/rdpla">rdpla</a>, <a href="https://github.com/ropensci/rerddap">rerddap</a>, <a href="https://github.com/ropensci/rnoaa">rnoaa</a>, and <a href="https://github.com/ropensci/taxizedb">taxizedb</a>. I’m planning to use it in 
many more packages, especially as it gets more stable.</p>

<p>This is how I use <code class="highlighter-rouge">hoardr</code> in packages.</p>

<ul>
  <li>list <code class="highlighter-rouge">hoardr</code> in your Imports in your DESCRIPTION file</li>
  <li>make on <code class="highlighter-rouge">.onLoad</code> method in your package, with the following content (as an example):</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cache</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w">
</span><span class="n">.onLoad</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">libname</span><span class="p">,</span><span class="w"> </span><span class="n">pkgname</span><span class="p">){</span><span class="w">
  </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">hoardr</span><span class="o">::</span><span class="n">hoard</span><span class="p">()</span><span class="w">
  </span><span class="n">x</span><span class="o">$</span><span class="n">cache_path_set</span><span class="p">(</span><span class="s2">"&lt;your package name&gt;"</span><span class="p">)</span><span class="w">
  </span><span class="n">cache</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">x</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Then when the package is loaded, you have a <code class="highlighter-rouge">cache</code> object that you can then use 
to manage cached files.</p>

<ul>
  <li>Use <code class="highlighter-rouge">cache$mkdir()</code> to make the directory</li>
  <li>Probably use <code class="highlighter-rouge">cache$cache_path_get()</code> in combination with e.g., <code class="highlighter-rouge">file.path()</code> 
to make file paths for files you need to cache</li>
  <li>Write files as needed</li>
  <li>If you need to delete files you can use <code class="highlighter-rouge">delete()</code> method to delete by name, or
use <code class="highlighter-rouge">unlink()</code> on the complete file path, or you can <code class="highlighter-rouge">delet_all()</code> if you need to 
delete all files.</li>
  <li>If you need to do compression <code class="highlighter-rouge">compress</code>/<code class="highlighter-rouge">uncompress</code> are available - may be a nice
thing to do for users so files are taking up less disk space.</li>
  <li>Add a manual file with a description of the various methods available and
example usage, e.g, <a href="https://github.com/ropensci/crminer/blob/master/R/caching.R">https://github.com/ropensci/crminer/blob/master/R/caching.R</a></li>
  <li>The <code class="highlighter-rouge">cache</code> object created above is also available to the user of your package
so that they can manage files themselves as well - but of course you can 
choose not to export the cache object with methods to the user.</li>
</ul>

:ET