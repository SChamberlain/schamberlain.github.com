I"ÏV<p><code class="highlighter-rouge">request</code> is DSL for http requests for R, and is inspired by the CLI tool <a href="https://github.com/jakubroztocil/httpie">httpie</a>. Itâ€™s built on <code class="highlighter-rouge">httr</code>.</p>

<p>The following were driving principles for this package:</p>

<ul>
  <li>The web is increasingly a JSON world, so we assume <code class="highlighter-rouge">applications/json</code> by default, but give back other types if not</li>
  <li>The workflow follows logically, or at least should, from, <em>hey, I got this url</em>, to <em>i need to add some options</em>, to <em>execute request</em> - and functions support piping so that you can execute functions in this order</li>
  <li>Whenever possible, we transform output to data.frameâ€™s - facilitating downstream manipulation via <code class="highlighter-rouge">dplyr</code>, etc.</li>
  <li>We do <code class="highlighter-rouge">GET</code> requests by default. Specify a different type if you donâ€™t want <code class="highlighter-rouge">GET</code>. Given <code class="highlighter-rouge">GET</code> by default, this client is optimized for consumption of data, rather than creating new things on servers</li>
  <li>You can use non-standard evaluation to easily pass in query parameters without worrying about <code class="highlighter-rouge">&amp;</code>â€™s, URL escaping, etc. (see <code class="highlighter-rouge">api_query()</code>)</li>
  <li>Same for body params (see <code class="highlighter-rouge">api_body()</code>)</li>
</ul>

<p>The following is a brief demo of some of the package functionality:</p>

<h2 id="install">Install</h2>

<p>From CRAN</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"request"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Or from GitHub</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"sckott/request"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"request"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="execute-on-last-pipe">Execute on last pipe</h2>

<p>When using pipes (<code class="highlighter-rouge">%&gt;%</code>) in <code class="highlighter-rouge">request</code>, we autodetect last piped command, and execute <code class="highlighter-rouge">http()</code> if itâ€™s the last. If not the last, the output gets passed to the next command, and so on. This feature (and <code class="highlighter-rouge">magrittr</code>) were done by Stefan Milton Bache.</p>

<p>This feature is really nice because a) itâ€™s one less thing you need to do, and b) you only need to care about the request itself.</p>

<p>You can escape auto-execution if you use the function <code class="highlighter-rouge">peep()</code>, which prints out a summary of the request youâ€™ve created, but does not execute an HTTP request.</p>

<h2 id="http-requests">HTTP Requests</h2>

<p>A high level function <code class="highlighter-rouge">http()</code> wraps a lower level <code class="highlighter-rouge">R6</code> object <code class="highlighter-rouge">RequestIterator</code>, which holds a series of variables and functions to execute <code class="highlighter-rouge">GET</code> and <code class="highlighter-rouge">POST</code> requests, and will hold other HTTP verbs as well. In addition, it can hold state, which will allow us to do paging internally for you (see below). You have direct access to the <code class="highlighter-rouge">R6</code> object if you call <code class="highlighter-rouge">http_client()</code> instead of <code class="highlighter-rouge">http()</code>.</p>

<h2 id="nse-and-se">NSE and SE</h2>

<p>Most if not all functions in <code class="highlighter-rouge">request</code> support non-standard evaluation (NSE) as well as standard evaluation (SE). If a function supports both, thereâ€™s a version without an underscore for NSE, while a version with an underscore is for SE. For example, here, we make a HTTP request by passing a base URL, then a series of paths that get combined together. First the NSE version</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_path</span><span class="p">(</span><span class="n">repos</span><span class="p">,</span><span class="w"> </span><span class="n">ropensci</span><span class="p">,</span><span class="w"> </span><span class="n">rgbif</span><span class="p">,</span><span class="w"> </span><span class="n">issues</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Then the SE version</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_path_</span><span class="p">(</span><span class="s1">'repos'</span><span class="p">,</span><span class="w"> </span><span class="s1">'ropensci'</span><span class="p">,</span><span class="w"> </span><span class="s1">'rgbif'</span><span class="p">,</span><span class="w"> </span><span class="s1">'issues'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="building-api-routes">Building API routes</h2>

<p>The first thing youâ€™ll want to do is lay out the base URL for your request. The function <code class="highlighter-rouge">api()</code> is your friend.</p>

<p><code class="highlighter-rouge">api()</code> works with full or partial URLs:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: https://api.github.com/</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'http://api.gbif.org/v1'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://api.gbif.org/v1</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'api.gbif.org/v1'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: api.gbif.org/v1</span><span class="w">
</span></code></pre></div></div>

<p>And works with ports, full or partial</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'http://localhost:9200'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://localhost:9200</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'localhost:9200'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://localhost:9200</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">':9200'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://localhost:9200</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'9200'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://localhost:9200</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'9200/stuff'</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; URL: http://localhost:9200/stuff</span><span class="w">
</span></code></pre></div></div>

<h2 id="make-http-requests">Make HTTP requests</h2>

<p>The above examples with <code class="highlighter-rouge">api()</code> are not passed through a pipe, so only define a URL, but donâ€™t do an HTTP request. To make an HTTP request, you can either pipe a url or partial url to e.g., <code class="highlighter-rouge">api()</code>, or call <code class="highlighter-rouge">http()</code> at the end of a string of function calls:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'https://api.github.com/'</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">api</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; $current_user_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/user"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $current_user_authorizations_html_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://github.com/settings/connections/applications{/client_id}"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $authorizations_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/authorizations"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $code_search_url</span><span class="w">
</span><span class="n">...</span><span class="w">
</span></code></pre></div></div>

<p>Or</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">http</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; $current_user_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/user"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $current_user_authorizations_html_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://github.com/settings/connections/applications{/client_id}"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $authorizations_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/authorizations"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; $code_search_url</span><span class="w">
</span><span class="n">...</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">http()</code> is called at the end of a chain of piped commands, so no need to invoke it. However, you can if you like.</p>

<h2 id="templating">Templating</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">repo_info</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'craigcitro'</span><span class="p">,</span><span class="w"> </span><span class="n">repo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'r-travis'</span><span class="p">)</span><span class="w">
</span><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_template</span><span class="p">(</span><span class="n">template</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'repos///issues'</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">repo_info</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [[1]]</span><span class="w">
</span><span class="c1">#&gt; [[1]]$url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/repos/craigcitro/r-travis/issues/164"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; [[1]]$labels_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/repos/craigcitro/r-travis/issues/164/labels{/name}"</span><span class="w">
</span><span class="c1">#&gt;</span><span class="w">
</span><span class="c1">#&gt; [[1]]$comments_url</span><span class="w">
</span><span class="c1">#&gt; [1] "https://api.github.com/repos/craigcitro/r-travis/issues/164/comments"</span><span class="w">
</span><span class="c1">#&gt; ...</span><span class="w">
</span></code></pre></div></div>

<h2 id="set-paths">Set paths</h2>

<p><code class="highlighter-rouge">api_path()</code> adds paths to the base URL</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'https://api.github.com/'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_path</span><span class="p">(</span><span class="n">repos</span><span class="p">,</span><span class="w"> </span><span class="n">ropensci</span><span class="p">,</span><span class="w"> </span><span class="n">rgbif</span><span class="p">,</span><span class="w"> </span><span class="n">issues</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">peep</span><span class="w">
</span><span class="c1">#&gt; &lt;http request&gt;</span><span class="w">
</span><span class="c1">#&gt;   url: https://api.github.com/</span><span class="w">
</span><span class="c1">#&gt;   paths: repos/ropensci/rgbif/issues</span><span class="w">
</span><span class="c1">#&gt;   query:</span><span class="w">
</span><span class="c1">#&gt;   body:</span><span class="w">
</span><span class="c1">#&gt;   paging:</span><span class="w">
</span><span class="c1">#&gt;   headers:</span><span class="w">
</span><span class="c1">#&gt;   rate limit:</span><span class="w">
</span><span class="c1">#&gt;   retry (n/delay (s)): /</span><span class="w">
</span><span class="c1">#&gt;   error handler:</span><span class="w">
</span><span class="c1">#&gt;   config:</span><span class="w">
</span></code></pre></div></div>

<h2 id="query">Query</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s2">"http://api.plos.org/search"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_query</span><span class="p">(</span><span class="n">q</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ecology</span><span class="p">,</span><span class="w"> </span><span class="n">wt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">json</span><span class="p">,</span><span class="w"> </span><span class="n">fl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">journal</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">peep</span><span class="w">
</span><span class="c1">#&gt; &lt;http request&gt;</span><span class="w">
</span><span class="c1">#&gt;   url: http://api.plos.org/search</span><span class="w">
</span><span class="c1">#&gt;   paths:</span><span class="w">
</span><span class="c1">#&gt;   query: q=ecology, wt=json, fl=journal</span><span class="w">
</span><span class="c1">#&gt;   body:</span><span class="w">
</span><span class="c1">#&gt;   paging:</span><span class="w">
</span><span class="c1">#&gt;   headers:</span><span class="w">
</span><span class="c1">#&gt;   rate limit:</span><span class="w">
</span><span class="c1">#&gt;   retry (n/delay (s)): /</span><span class="w">
</span><span class="c1">#&gt;   error handler:</span><span class="w">
</span><span class="c1">#&gt;   config:</span><span class="w">
</span></code></pre></div></div>

<h2 id="headers">Headers</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'http://httpbin.org/headers'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_headers</span><span class="p">(</span><span class="n">`X-FARGO-SEASON`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="n">`X-NARCOS-SEASON`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">peep</span><span class="w">
</span><span class="c1">#&gt; &lt;http request&gt;</span><span class="w">
</span><span class="c1">#&gt;   url: http://httpbin.org/headers</span><span class="w">
</span><span class="c1">#&gt;   paths:</span><span class="w">
</span><span class="c1">#&gt;   query:</span><span class="w">
</span><span class="c1">#&gt;   body:</span><span class="w">
</span><span class="c1">#&gt;   paging:</span><span class="w">
</span><span class="c1">#&gt;   headers:</span><span class="w">
</span><span class="c1">#&gt;     X-FARGO-SEASON: 3</span><span class="w">
</span><span class="c1">#&gt;     X-NARCOS-SEASON: 5</span><span class="w">
</span><span class="c1">#&gt;   rate limit:</span><span class="w">
</span><span class="c1">#&gt;   retry (n/delay (s)): /</span><span class="w">
</span><span class="c1">#&gt;   error handler:</span><span class="w">
</span><span class="c1">#&gt;   config:</span><span class="w">
</span></code></pre></div></div>

<h2 id="curl-configuration">curl configuration</h2>

<p><code class="highlighter-rouge">httr</code> is exported in <code class="highlighter-rouge">request</code>, so you can use <code class="highlighter-rouge">httr</code> functions like <code class="highlighter-rouge">verbose()</code> to get verbose curl output</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">api</span><span class="p">(</span><span class="s1">'http://httpbin.org/headers'</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">api_config</span><span class="p">(</span><span class="n">verbose</span><span class="p">())</span><span class="w">
</span><span class="c1">#&gt; -&gt; GET /headers HTTP/1.1</span><span class="w">
</span><span class="c1">#&gt; -&gt; Host: httpbin.org</span><span class="w">
</span><span class="c1">#&gt; -&gt; User-Agent: curl/7.43.0 curl/0.9.4 httr/1.0.0 request/0.1.0</span><span class="w">
</span><span class="c1">#&gt; -&gt; Accept-Encoding: gzip, deflate</span><span class="w">
</span><span class="c1">#&gt; -&gt; Accept: application/json, text/xml, application/xml, */*</span><span class="w">
</span><span class="c1">#&gt; -&gt;</span><span class="w">
</span><span class="c1">#&gt; &lt;- HTTP/1.1 200 OK</span><span class="w">
</span><span class="c1">#&gt; &lt;- Server: nginx</span><span class="w">
</span><span class="c1">#&gt; &lt;- Date: Sun, 03 Jan 2016 16:56:29 GMT</span><span class="w">
</span><span class="c1">#&gt; &lt;- Content-Type: application/json</span><span class="w">
</span><span class="c1">#&gt; &lt;- Content-Length: 227</span><span class="w">
</span><span class="c1">#&gt; &lt;- Connection: keep-alive</span><span class="w">
</span><span class="c1">#&gt; &lt;- Access-Control-Allow-Origin: *</span><span class="w">
</span><span class="c1">#&gt; &lt;- Access-Control-Allow-Credentials: true</span><span class="w">
</span><span class="c1">#&gt; &lt;-</span><span class="w">
</span><span class="c1">#&gt; $headers</span><span class="w">
</span><span class="c1">#&gt; $headers$Accept</span><span class="w">
</span><span class="c1">#&gt; [1] "application/json, text/xml, application/xml, */*"</span><span class="w">
</span><span class="c1">#&gt; ...</span><span class="w">
</span></code></pre></div></div>

<h2 id="coming-soon">Coming soon</h2>

<p>Thereâ€™s a number of interesting features that should be coming soon to <code class="highlighter-rouge">request</code>.</p>

<ul>
  <li>Paging - a paging helper will make it easy to do paing, and will attempt to handle any parameters used for paging. Some user input will be required, like what parameter names are, and how many records you want returned  <a href="https://github.com/sckott/request/issues/2">sckott/request#2</a></li>
  <li>Retry - a retry helper will make it easy to retry http requests on any failure, and execute a user defined function on failure <a href="https://github.com/sckott/request/issues/6">sckott/request#6</a></li>
  <li>Rate limit - a rate limit helper will add info to a set of many requests - still in early design stages <a href="https://github.com/sckott/request/issues/5">sckott/request#5</a></li>
  <li>Caching - a caching helper - may use in the background the in development <a href="https://github.com/ropensci/vcr">vcr R client</a> when on CRAN or perhaps <a href="https://github.com/richfitz/storr">storr</a>  <a href="https://github.com/sckott/request/issues/4">sckott/request#4</a></li>
</ul>
:ET