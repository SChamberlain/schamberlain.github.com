I"ÇH<p>Functions can have no parameters, or have a lot of parameters, or somewhere
in between. How many parameters is too many? Does it even matter how many
parameters there are in a function?</p>

<p>There‚Äôs AFAIK no ‚Äúcorrect‚Äù answer to this question. And surely the ‚Äúbest
practice‚Äù varies among programming lanugages. What do folks say about
this and what should we be doing in R?</p>

<h2 id="from-other-languages">From other languages</h2>

<p>Many of the blog posts and SO posts on this topic cite the book
<a href="https://www.goodreads.com/book/show/3735293-clean-code">Clean Code</a> by ‚ÄúUncle Bob‚Äù. I‚Äôve not read the book, but
it sounds worth a read.</p>

<p><a href="https://hackernoon.com/object-oriented-tricks-3-death-by-arguments-d070ac86d996">Some of the arguments go like</a>: <em>too many arguments can</em> ‚Ä¶</p>

<ul>
  <li>makes it easier to pass arguments in the wrong order</li>
  <li>reduce code readability</li>
  <li>make it harder to test a function; it‚Äôs difficult/time consuming to
test all various combinations of arguments work together</li>
</ul>

<p>An <a href="https://www.exakat.io/how-many-parameters-is-too-many/">analysis was done</a> in 2018 of php open source projects, and they
found that the most common number of parameters was 5; functions with 10
parameters or more were found in &lt;20% of projects.</p>

<p>On the other side, <a href="https://stackoverflow.com/a/175087/1091766">some</a> argue that
you shouldn‚Äôt worry so much about the correct
number of parameters, but rather make sure that all the parameters make sense,
and are documented and tested.</p>

<p>To the extreme, a number of people <a href="https://stackoverflow.com/a/175035/1091766">quote the Clean Code book</a>:</p>

<blockquote>
  <p>The ideal number of arguments for a function is zero</p>
</blockquote>

<p>Some general threads on this topic:</p>

<ul>
  <li><a href="https://softwareengineering.stackexchange.com/questions/145055/are-there-guidelines-on-how-many-parameters-a-function-should-accept">Software engineering Stackexchange</a></li>
  <li><a href="https://stackoverflow.com/questions/174968/how-many-parameters-are-too-many">Stackoverflow</a></li>
</ul>

<h2 id="what-about-r">What about R?</h2>

<p>What do the data show in the R language? Just like the blog post on php above,
let‚Äôs have a look at a lot of R packages to get a general data informed
consensus on how many parameters are used per function.</p>

<p>It‚Äôs incredibly likely that there is a better way to do what i‚Äôve done
below; but this is my hacky way of getting to the data.</p>

<p>What I‚Äôve done in words:</p>

<ul>
  <li>Get a list of all available package names on CRAN</li>
  <li>Install about half of them (didn‚Äôt do all cause it takes time and 
I don‚Äôt think I need all 15K packages to get a good answer)</li>
  <li>List the exported functions in each package</li>
  <li>Count the arguments (parameters) per function in each package</li>
  <li>Visualize the results</li>
</ul>

<p>I ended up using 82489 functions across 4777 packages</p>

<p>Load packages</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">plyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tibble</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Use a different path from my actual R library location to not pollute
my current setup, and put binaries into a temporary directory 
so they are cleaned up on exiting R.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"/Volumes/GD-Jr/fran/params"</span><span class="w">
</span><span class="n">binaries</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">file.path</span><span class="p">(</span><span class="n">tempdir</span><span class="p">(),</span><span class="w"> </span><span class="s2">"binaries"</span><span class="p">)</span><span class="w">
</span><span class="n">dir.create</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="w">
</span><span class="n">dir.create</span><span class="p">(</span><span class="n">binaries</span><span class="p">)</span><span class="w">
</span><span class="n">.libPaths</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="w">
</span><span class="n">.libPaths</span><span class="p">()</span><span class="w"> </span><span class="c1"># check that the path was set</span><span class="w">
</span></code></pre></div></div>

<p>Function <code class="highlighter-rouge">do_one()</code> to run on each package:</p>
<ul>
  <li>try to load the package</li>
  <li>if not found install it</li>
  <li>get a vector of the exported functions in the package</li>
  <li>count how many arguments each function has, make a data.frame</li>
  <li>unload the package namespace</li>
</ul>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">do_one</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">pkg</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">requireNamespace</span><span class="p">(</span><span class="n">pkg</span><span class="p">))</span><span class="w">
    </span><span class="n">install.packages</span><span class="p">(</span><span class="n">pkg</span><span class="p">,</span><span class="w"> </span><span class="n">quiet</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">destdir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">binaries</span><span class="p">)</span><span class="w">
  </span><span class="nf">on.exit</span><span class="p">(</span><span class="n">unloadNamespace</span><span class="p">(</span><span class="n">pkg</span><span class="p">))</span><span class="w">
  </span><span class="n">funs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">pkg</span><span class="p">,</span><span class="w"> </span><span class="s2">"::"</span><span class="p">,</span><span class="w"> </span><span class="n">getNamespaceExports</span><span class="p">(</span><span class="n">pkg</span><span class="p">))</span><span class="w">
  </span><span class="n">enframe</span><span class="p">(</span><span class="n">vapply</span><span class="p">(</span><span class="n">funs</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">w</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">tt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tryCatch</span><span class="p">(</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">w</span><span class="p">),</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">inherits</span><span class="p">(</span><span class="n">tt</span><span class="p">,</span><span class="w"> </span><span class="s2">"error"</span><span class="p">))</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">suppressWarnings</span><span class="p">(</span><span class="n">formals</span><span class="p">(</span><span class="n">eval</span><span class="p">(</span><span class="n">tt</span><span class="p">))))</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="m">0</span><span class="w">
  </span><span class="p">},</span><span class="w"> </span><span class="n">numeric</span><span class="p">(</span><span class="m">1</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">do_one_safe</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">failwith</span><span class="p">(</span><span class="n">tibble</span><span class="p">(),</span><span class="w"> </span><span class="n">do_one</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Get a list of packages. First time running through I used <code class="highlighter-rouge">available.packages()</code> which
gets you all available packages. After installing packages though, I used
<code class="highlighter-rouge">installed.packages()</code> to get the list of packages I already installed.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pkg_names &lt;- unname(available.packages()[,"Package"])</span><span class="w">
</span><span class="n">pkg_names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unname</span><span class="p">(</span><span class="n">installed.packages</span><span class="p">()[,</span><span class="s2">"Package"</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p>Run each package through the <code class="highlighter-rouge">do_one()</code> function. This had to be stopped and
re-started a few times.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tbls</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stats</span><span class="o">::</span><span class="n">setNames</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="n">pkg_names</span><span class="p">,</span><span class="w"> </span><span class="n">do_one_safe</span><span class="p">),</span><span class="w"> </span><span class="n">pkg_names</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Combine list of data.frame‚Äôs into one data.frame</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">bind_rows</span><span class="p">(</span><span class="n">tbls</span><span class="p">,</span><span class="w"> </span><span class="n">.id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pkg"</span><span class="p">)</span><span class="w">
</span><span class="n">readr</span><span class="o">::</span><span class="n">write_csv</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="s2">"params_per_fxn.csv"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readr</span><span class="o">::</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"~/params_per_fxn.csv"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Visualize</p>

<p><strong>All functions across all packages</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">30</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_x_continuous</span><span class="p">(</span><span class="n">limits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">30</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_grey</span><span class="p">(</span><span class="n">base_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">15</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="/public/img/2020-02-10-how-many-parameters/unnamed-chunk-5-1.png" alt="plot of chunk unnamed-chunk-5" /></p>

<p>The mean number of arguments per function across all packages was 4.4,
and the most common value was 3. The maximum number of arguments was
209, and there were 5306 functions
(or 6.4%) with zero
parameters.</p>

<p><strong>Mean params across functions for each pkg</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_means</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">group_by</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">pkg</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">summarise</span><span class="p">(</span><span class="n">mean_params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">na.rm</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">ungroup</span><span class="p">()</span><span class="w">
</span><span class="c1"># arrange(df_means, desc(mean_params))</span><span class="w">
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">df_means</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean_params</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_histogram</span><span class="p">(</span><span class="n">bins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_x_continuous</span><span class="p">(</span><span class="n">limits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">30</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_grey</span><span class="p">(</span><span class="n">base_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">15</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="/public/img/2020-02-10-how-many-parameters/unnamed-chunk-6-1.png" alt="plot of chunk unnamed-chunk-6" /></p>

<p>Taking the mean within each package first pulls the number of arguments to the right some,
with a mean of 5 arguments, and the most common value at 4.</p>

<h2 id="thoughts">Thoughts</h2>

<p>In terms of getting around the too many arguments thing, there‚Äôs talk of
using global variables, which seems like generally a bad idea; unless perhaps
they are environment variables that are meant to be set by the user in
non-interactive environnments, etc.</p>

<p>Other solutions are to use <code class="highlighter-rouge">...</code> in R, or similarly <code class="highlighter-rouge">**kwargs</code> or <code class="highlighter-rouge">**args</code>, or
the newly added <code class="highlighter-rouge">...</code> in Ruby. With this approach you could have very few parameters
defined in the function, and then internally within the function handle any parameter
filtering, etc. The downside of this in R is that you don‚Äôt get the automated
checks making sure all function arguments are documented, and there‚Äôs no documented
arguments that don‚Äôt exist in the function.</p>

<p>I‚Äôm not suggesting a solution is needed though. This definitely seems like an
everyone‚Äôs got one situation - i.e., there‚Äôs no right answer, but rather lots
of opinions.</p>

<p>Having said that, the average R function does use about 4 arguments, so if you 
keep your functions to around 4 arguments you‚Äôll be approaching the sort of
consensus of a large number of R developers.</p>

:ET