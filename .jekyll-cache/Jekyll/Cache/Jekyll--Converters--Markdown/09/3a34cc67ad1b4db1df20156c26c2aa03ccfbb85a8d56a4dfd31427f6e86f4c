I"œ=<p>There are a lot of ways to make R packages. Many blog posts have covered making
R packages, but for the most part theyâ€™ve covered only how they make
packages, going from the required files for a package, what to put in DESCRIPTION, etc. But what about the tooling? Iâ€™m not going to talk about the code, etc. - but rather the different ways to approach it.</p>

<p>The blog posts/etc. on making R packages:</p>

<ul>
  <li><a href="https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/">Writing an R package from scratch</a> - Hilary Parker</li>
  <li><a href="https://github.com/jtleek/rpackages">Developing R packages</a> - Jeff Leek</li>
  <li><a href="http://stat545.com/packages00_index.html">stat545 - Write your own R package</a> - Jenny Bryanâ€™s statistics 545 class at UBC</li>
  <li><a href="http://kbroman.org/pkg_primer/">R package primer</a> - Karl Boman</li>
  <li><a href="http://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html">Making Your First R Package</a> - Fong Chun Chan</li>
  <li><a href="http://www.mjdenny.com/R_Package_Pictorial.html">R Package Development Pictorial</a> - Matthew Denny</li>
  <li><a href="https://www.coursera.org/learn/r-packages">Coursera course on building R packages</a></li>
  <li><a href="http://r-pkgs.had.co.nz/">R Packages</a> by Hadley for a full treatment of the subject.</li>
  <li>From time to time you may need to reference CRANâ€™s <a href="https://cran.r-project.org/doc/manuals/r-release/R-exts.html">Writing R Extensions</a>.</li>
</ul>

<p><br /></p>

<h2 id="the-ways">the ways</h2>

<p>The following are not mutually exclusive - some can be combined with others.</p>

<p>In process of writing this I figured I should ask other people what they do. I ended up asking 16 people - not a random selection or a big enough <code class="highlighter-rouge">n</code> to really say anything conclusively. But it did allow me to cover more ways of doing
package dev.</p>

<p><br /></p>

<h3 id="mason">mason</h3>

<p>github: <a href="https://github.com/metacran/mason">https://github.com/metacran/mason</a> (by GÃ¡bor CsÃ¡rdi)</p>

<blockquote>
  <p>Note that <code class="highlighter-rouge">mason</code> is on CRAN, but itâ€™s a completely different package.</p>
</blockquote>

<p>You can use <code class="highlighter-rouge">mason</code> inside of R or via <code class="highlighter-rouge">Rscript</code> on the cli.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"metacran/mason"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">mason</span><span class="p">)</span><span class="w">
</span><span class="n">mason</span><span class="o">::</span><span class="n">mason</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<p>Then youâ€™ll go through a series of prompts asking you for inormation (package name, license, your name, etc.)</p>

<p>Out of 16 people I talked to, 2 mentioned using <code class="highlighter-rouge">mason</code>.</p>

<p><br /></p>

<h3 id="devtools">devtools</h3>

<p>github: <a href="https://github.com/hadley/devtools">https://github.com/hadley/devtools</a> (by Hadley Wickham)</p>

<p>Within R:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"devtools"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">devtools</span><span class="p">)</span><span class="w">
</span><span class="n">devtools</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s2">"foobar"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>On the cli, we can do:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rscript</span><span class="w"> </span><span class="o">-</span><span class="n">e</span><span class="w"> </span><span class="s1">'devtools::create("foobar")'</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">devtools::create()</code> adds basic set of files needed for an R package - and also adds files assuming you use the RStudio IDE. Though you can not add RStudio files by choosing <code class="highlighter-rouge">rstudio = FALSE</code>.</p>

<p>Be aware of the default entry in the <code class="highlighter-rouge">NAMESPACE</code> file: <code class="highlighter-rouge">exportPattern("^[^\\.]")</code>. The first time you generate documentation, e.g., via <code class="highlighter-rouge">devtools::document()</code> your <code class="highlighter-rouge">NAMESPACE</code> file will be changed to only export those things you want exported, which is ideal.</p>

<p>Out of 16 people I talked to, 7 mentioned using <code class="highlighter-rouge">devtools</code>.</p>

<p><br /></p>

<h3 id="rcmdcheck">rcmdcheck</h3>

<p>rcmdcheck: <a href="https://github.com/r-lib/rcmdcheck">https://github.com/r-lib/rcmdcheck</a></p>

<p>This is an alternative to running <code class="highlighter-rouge">R CMD CHECK</code> or <code class="highlighter-rouge">devtools::check()</code>, that gives nice colorized output, at least in the terminal.</p>

<p>I usually run it like this in the root of an R package directory in my terminal (running with <code class="highlighter-rouge">--as-cran</code> to check as CRAN does, and <code class="highlighter-rouge">--run-dontrun</code> to run examples wrapped in <code class="highlighter-rouge">\dontrun{}</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Rscript -e 'rcmdcheck::rcmdcheck(args = c("--as-cran", "--run-dontrun"))'
</code></pre></div></div>

<p><br /></p>

<h3 id="ide-rstudio">IDE: RStudio</h3>

<p>rstudio: <a href="https://www.rstudio.com/products/rstudio/#Desktop">https://www.rstudio.com/products/rstudio/#Desktop</a></p>

<p>The following is a guide provided by RStudio for creating packages in RStudio IDE: <a href="https://support.rstudio.com/hc/en-us/articles/200486488-Developing-Packages-with-RStudio">Using RStudio for package development</a></p>

<p>When in RStudio - New Project in upper left hand corner - choose new or existing directory - choose R package - name the package, and you probably want to initialize git by checking the appropriate box.</p>

<p>Out of 16 people I talked to, 14 used RStudio all the time or most of the time.
Itâ€™s popular, to say the least.</p>

<p>A noteable quote from one person I talked to:</p>

<blockquote>
  <p>all rstudio all day</p>
</blockquote>

<h4 id="rstudio-inside-of-docker">RStudio inside of Docker</h4>

<p>rstudio server: <a href="https://www.rstudio.com/products/rstudio/download-server/">https://www.rstudio.com/products/rstudio/download-server/</a>
rstudio server docker container: <a href="https://hub.docker.com/r/rocker/rstudio/">https://hub.docker.com/r/rocker/rstudio/</a></p>

<p>I know of at least one person that works this way, and surely there are others.</p>

<p>As simple as:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-p</span> 8787:8787 rocker/rstudio
</code></pre></div></div>

<p>Then visit <code class="highlighter-rouge">localhost:8787</code> in your browser.</p>

<p><br /></p>

<h3 id="web">web</h3>

<p>For example, we could just create files from the Github website. e.g,.</p>

<ul>
  <li>New Repository</li>
  <li>then add files youâ€™d need for an R package and edit those in the browser</li>
</ul>

<p>Out of 16 people I talked to, 2 mentioned starting with creating a GitHub repository, then pulling that down, R development, etc. etc., then push back up. But no one mentioned all in browser - although see <strong>phone dev</strong> below.</p>

<p>The Github web interface is an important starting point for getting people into code in general when they are not familiar with git.</p>

<p><br /></p>

<h3 id="text-editor">text editor</h3>

<p>If you primarily work in a text editor perhaps this (using <a href="https://atom.io/">Atom editor</a>):</p>

<p><code class="highlighter-rouge">Rscript -e 'devtools::create("foobar")' &amp;&amp; cd foobar &amp;&amp; git init &amp;&amp; atom .</code></p>

<p><img src="/public/img/2017-06-18-package-dev/atom.png" alt="atom" /></p>

<p>Or the same for <a href="https://www.sublimetext.com/">Sublime Text</a> with <code class="highlighter-rouge">subl .</code> instead of <code class="highlighter-rouge">atom .</code></p>

<p>Two of 16 people I talked to mentioned using <a href="https://www.gnu.org/software/emacs/">Emacs</a> exclusively or mostly. One of the 16 people mentione Sublime Text by name - thatâ€™s also the editor I use (I often have RStudio and Sublime Text open for the same R package - switching between them for the features I like).</p>

<p><br /></p>

<h3 id="copypaste">copy/paste</h3>

<p>Sometimes when creating a new package I know of a previous package Iâ€™ve created that may have similar code I want in the new one or so. So I just copy/paste essentially the old package into a new folder. Be careful when doing this: make sure to delete git history, then re-initialize git (<code class="highlighter-rouge">rm -rf .git &amp;&amp; git init</code> in the new repository). Ideally you use roxygen/devtools for docs - in which case just delete all files in <code class="highlighter-rouge">man/</code> then when you generate docs, you get all new man files.</p>

<p><br /></p>

<h3 id="rhub">rhub</h3>

<p>rhub: <a href="https://builder.r-hub.io/">https://builder.r-hub.io/</a> <a href="https://github.com/r-hub">https://github.com/r-hub</a> <a href="https://www.r-consortium.org/events/2016/10/11/r-hub-public-beta">https://www.r-consortium.org/events/2016/10/11/r-hub-public-beta</a></p>

<p>R-hub is a project by Gabor CsÃ¡rdi, funded by the <a href="https://www.r-consortium.org/">R Consortium</a>, which is a service for developing, building, testing and validating R packages.</p>

<p>One of the 16 people I talked to mentioned <code class="highlighter-rouge">rhub</code> - but I imagine many of them use it. I use it :)</p>

<p>I usually use it from the command line (or you can use it from within R, either on CLI or RStudio), like <code class="highlighter-rouge">rhub::check_for_cran()</code> to get checks for my package on Windows and two Linux platforms, before sending to CRAN.</p>

<p><br /></p>

<h3 id="the-makefile">the Makefile</h3>

<p>The <a href="https://en.wikipedia.org/wiki/Makefile">Makefile</a> is a file containing a set of directives. Some use a Makefile for a few or even most things one does in package development, from re-making <code class="highlighter-rouge">man</code> files, to building, installing, checking, building vignettes, making <a href="https://github.com/hadley/pkgdown">pkgdown docs</a>, and more. Makefiles can include actions that do not just R things, but run other programming/command line tools. Itâ€™s a good idea when contributing to another R package to look for a Makefile - and to use them in your own package development. I donâ€™t personally use them enough, and ideally will use them more in the future.</p>

<p>Hereâ€™s an example of <a href="https://github.com/richfitz/storr/blob/master/Makefile">a Makefile</a> from Rich FitzJohn:</p>

<p><a href="https://github.com/richfitz/storr/blob/master/Makefile"><img src="/public/img/2017-06-18-package-dev/makefile.png" width="400" /></a></p>

<p><br /></p>

<h3 id="ruby">ruby?</h3>

<p>To scratch a personal itch, I made a little Ruby gem with a command line tool to run one or more specific tests by fuzzy matching the name of the test file. Reason is, sometimes I work on a test file and I just want to run that test and not any others - and not from within RStudio, but form the terminal.</p>

<p><a href="https://github.com/sckott/rubrb">https://github.com/sckott/rubrb</a></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>âžœ rb <span class="nb">test </span>config
using:
  tests/testthat/test-config-fxns.R

config fxns: ........

DONE <span class="o">===========================================================================</span>
</code></pre></div></div>

<p>Iâ€™m sure thereâ€™s lots of these types of things out there - scratching an itch that helps the person work the way they want to work.</p>

<p>While weâ€™re on the topic of Ruby, Travis-CI has a nice Ruby gem <a href="https://rubygems.org/gems/travis">travis</a> to interact with Travis for your R packages. Thereâ€™s also one for <a href="https://rubygems.org/gems/circle-cli">Circle-CI</a> and <a href="https://rubygems.org/gems/veyor">Iâ€™ve written one for Appveyor</a>.</p>

<p><br /></p>

<h3 id="phone-dev">phone dev</h3>

<p>DO NOT TRY THIS AT HOME</p>

<blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"><p lang="en" dir="ltr">tracestack: search Stack Overflow for your most recent error msg. First <a href="https://twitter.com/hashtag/rstats?src=hash">#rstats</a> package written entirely on a phone? <a href="https://t.co/IRX2luiR0N">https://t.co/IRX2luiR0N</a></p>&mdash; David Robinson (@drob) <a href="https://twitter.com/drob/status/592074817735630850">April 25, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">.<a href="https://twitter.com/drob">@drob</a> just wrote an <a href="https://twitter.com/hashtag/rstats?src=hash">#rstats</a> package from his phone, in case you wanted to feel even less productive checking twitter</p>&mdash; Hilary Parker (@hspter) <a href="https://twitter.com/hspter/status/592071435314683904">April 25, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">So that idea for throwing traceback to stackoverflow? <a href="https://twitter.com/drob">@drob</a> is actually writing it. As a package. Live on github. ON HIS PHONE. <a href="https://twitter.com/hashtag/rstats?src=hash">#rstats</a></p>&mdash; Oliver Keyes (@kopshtik) <a href="https://twitter.com/kopshtik/status/592056492397846528">April 25, 2015</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p><br /></p>

<hr />

<p><br /></p>

<h3 id="putting-stuff-on-the-web">putting stuff on the web</h3>

<p>While weâ€™re talking about tooling, I thought I should briefly mention putting code up on the interwebs. Thereâ€™s many code hosting options - for brevity, weâ€™ll just cover GitHub.</p>

<p>Itâ€™s a good idea to learn command line git, and related command line tools that make using git easier - if you can get work done faster you have more time to look at cat pictures!</p>

<p><a href="https://github.com/github/hub">hub</a> is one git tool that I use a lot. For example, create a folder, initialize a git repo, push to github, then open the just created repo on Github:</p>

<p><code class="highlighter-rouge">mkdir helloworld &amp;&amp; cd helloworld &amp;&amp; hub init &amp;&amp; hub create sckott/helloworld &amp;&amp; hub browse</code></p>

<p>where <code class="highlighter-rouge">hub create</code> uses the <code class="highlighter-rouge">owner/repo</code> pattern</p>

<p><img src="/public/img/2017-06-18-package-dev/hub.png" alt="hub" /></p>
:ET