I"8<hr />
<p>I had seen the function idata.frame in plyr before, but not really tested it. From the plyr documentation:</p>

<blockquote>
  <p><em>“An immutable data frame works like an ordinary data frame, except that when you subset it, it returns a reference to the original data frame, not a a copy. This makes subsetting substantially faster and has a big impact when you are working with large datasets with many groups.”</em></p>
</blockquote>

<p>For example, although baseball is a data.frame, its immutable counterpart is a reference to it:</p>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="o">&gt;</span><span class="w"> </span><span class="n">idata.frame</span><span class="p">(</span><span class="n">baseball</span><span class="p">)</span><span class="w">
</span><span class="o">&lt;</span><span class="n">environment</span><span class="o">:</span><span class="w"> </span><span class="mh">0x1022c74e8</span><span class="o">&gt;</span><span class="w">
</span><span class="nf">attr</span><span class="p">(,</span><span class="s2">"class"</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="s2">"idf"</span><span class="w">         </span><span class="s2">"environment"</span></code></pre></figure>

<p>Here are a few comparisons of operations on normal data frames and immutable data frames. Immutable data frames don’t work with the doBy package, but do work with aggregate in base functions.  Overall, the speed gains using idata.frame are quite impressive - I will use it more often for sure.</p>

<p>Here’s the comparisons of idata.frames and data.frames:</p>

<hr />

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># load packages</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">plyr</span><span class="p">)</span><span class="w">
</span><span class="n">require</span><span class="p">(</span><span class="n">reshape2</span><span class="p">)</span><span class="w">

</span><span class="c1"># Make immutable data frame</span><span class="w">
</span><span class="n">baseball_i</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">idata.frame</span><span class="p">(</span><span class="n">baseball</span><span class="p">)</span></code></pre></figure>

<h3 id="example-1---idataframe-more-than-twice-as-fast">Example 1 - idata.frame more than twice as fast</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">ddply</span><span class="p">(</span><span class="n">baseball</span><span class="p">,</span><span class="w"> </span><span class="s2">"year"</span><span class="p">,</span><span class="w"> </span><span class="n">summarise</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">rbi</span><span class="p">))))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  8.509   0.266   8.798 </code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">ddply</span><span class="p">(</span><span class="n">baseball_i</span><span class="p">,</span><span class="w"> </span><span class="s2">"year"</span><span class="p">,</span><span class="w"> </span><span class="n">summarise</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">rbi</span><span class="p">))))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  7.233   0.025   7.334 </code></pre></figure>

<h3 id="example-2---bummer-this-does-not-work-with-idataframes">Example 2 - Bummer, this does not work with idata.frame’s</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">colwise</span><span class="p">(</span><span class="n">max</span><span class="p">,</span><span class="w"> </span><span class="n">is.numeric</span><span class="p">)(</span><span class="n">baseball</span><span class="p">)</span><span class="w">  </span><span class="c1"># works</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">  year stint   g  ab   r   h X2b X3b hr rbi sb cs  bb so ibb hbp sh sf
1 2007     4 165 705 177 257  64  28 73  NA NA NA 232 NA  NA  NA NA NA
  gidp
1   NA</code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">colwise</span><span class="p">(</span><span class="n">max</span><span class="p">,</span><span class="w"> </span><span class="n">is.numeric</span><span class="p">)(</span><span class="n">baseball_i</span><span class="p">)</span><span class="w">  </span><span class="c1"># doesn't work</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Error: is.data.frame(df) is not TRUE</code></pre></figure>

<h3 id="example-3---idataframe-twice-as-fast">Example 3 - idata.frame twice as fast</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">baseball</span><span class="p">[</span><span class="n">baseball</span><span class="o">$</span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"1884"</span><span class="p">,</span><span class="w"> </span><span class="p">]))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  1.329   0.035   1.378 </code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">baseball_i</span><span class="p">[</span><span class="n">baseball_i</span><span class="o">$</span><span class="n">year</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"1884"</span><span class="p">,</span><span class="w"> </span><span class="p">]))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  0.674   0.015   0.689 </code></pre></figure>

<h3 id="example-4---idataframe-faster">Example 4 - idata.frame faster</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">melt</span><span class="p">(</span><span class="n">baseball</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">],</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  7.129   0.506   7.691 </code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">melt</span><span class="p">(</span><span class="n">baseball_i</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">],</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  0.852   0.162   1.015 </code></pre></figure>

<h3 id="and-you-can-go-back-to-a-data-frame-by">And you can go back to a data frame by</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">d</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">baseball_i</span><span class="p">)</span><span class="w">
</span><span class="n">str</span><span class="p">(</span><span class="n">d</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">'data.frame': 21699 obs. of  22 variables:
 $ id   : chr  "ansonca01" "forceda01" "mathebo01" "startjo01" ...
 $ year : int  1871 1871 1871 1871 1871 1871 1871 1872 1872 1872 ...
 $ stint: int  1 1 1 1 1 1 1 1 1 1 ...
 $ team : chr  "RC1" "WS3" "FW1" "NY2" ...
 $ lg   : chr  "" "" "" "" ...
 $ g    : int  25 32 19 33 29 29 29 46 37 25 ...
 $ ab   : int  120 162 89 161 128 146 145 217 174 130 ...
 $ r    : int  29 45 15 35 35 40 36 60 26 40 ...
 $ h    : int  39 45 24 58 45 47 37 90 46 53 ...
 $ X2b  : int  11 9 3 5 3 6 5 10 3 11 ...
 $ X3b  : int  3 4 1 1 7 5 7 7 0 0 ...
 $ hr   : int  0 0 0 1 3 1 2 0 0 0 ...
 $ rbi  : int  16 29 10 34 23 21 23 50 15 16 ...
 $ sb   : int  6 8 2 4 3 2 2 6 0 2 ...
 $ cs   : int  2 0 1 2 1 2 2 6 1 2 ...
 $ bb   : int  2 4 2 3 1 4 9 16 1 1 ...
 $ so   : int  1 0 0 0 0 1 1 3 1 0 ...
 $ ibb  : int  NA NA NA NA NA NA NA NA NA NA ...
 $ hbp  : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sh   : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sf   : int  NA NA NA NA NA NA NA NA NA NA ...
 $ gidp : int  NA NA NA NA NA NA NA NA NA NA ...</code></pre></figure>

<h3 id="idataframe-doesnt-work-with-the-doby-package">idata.frame doesn’t work with the doBy package</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">require</span><span class="p">(</span><span class="n">doBy</span><span class="p">)</span><span class="w">
</span><span class="n">summaryBy</span><span class="p">(</span><span class="n">rbi</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">baseball_i</span><span class="p">,</span><span class="w"> </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">mean</span><span class="p">),</span><span class="w"> </span><span class="n">na.rm</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">)</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Error: cannot coerce type 'environment' to vector of type 'any'</code></pre></figure>

<h3 id="but-idataframe-works-with-aggregate-in-base-but-with-minimal-speed-gains-and-aggregate-is-faster-than-ddply">But idata.frame works with aggregate in base (but with minimal speed gains) and aggregate is faster than ddply</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">aggregate</span><span class="p">(</span><span class="n">rbi</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">baseball</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  4.998   0.346   5.373 </code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">aggregate</span><span class="p">(</span><span class="n">rbi</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">baseball_i</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">)))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
  4.745   0.283   5.045 </code></pre></figure>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">system.time</span><span class="p">(</span><span class="n">replicate</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">ddply</span><span class="p">(</span><span class="n">baseball_i</span><span class="p">,</span><span class="w"> </span><span class="s2">"year"</span><span class="p">,</span><span class="w"> </span><span class="n">summarise</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">rbi</span><span class="p">))))</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-text" data-lang="text">   user  system elapsed 
 13.293   0.042  13.428 </code></pre></figure>

:ET