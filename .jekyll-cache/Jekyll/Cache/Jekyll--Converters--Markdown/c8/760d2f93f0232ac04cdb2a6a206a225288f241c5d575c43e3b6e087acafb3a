I"
<p>We (rOpenSci) just held our 3rd annual rOpenSci unconference (<a href="http://unconf16.ropensci.org/">http://unconf16.ropensci.org/</a>) in San Francisco. There were <a href="https://github.com/ropensci/unconf16/issues">a lot of ideas</a>, and lots of awesome projects from awesome people came out of the 2 day event.</p>

<p>One weird idea I had comes from looking at the Node world, where there are lots of tiny packages, instead of the often larger packages we have in the R world. One reason for tiny in Node is that of course you want a library to be tiny if running in the browser for faster load times (esp. on mobile).</p>

<p>So the idea is, what if we could separate all the functions in a package, or any particular function of your choice, into new packages, with all the internal functions and dependencies. And automatically as well, not manually.</p>

<p>So what are the use cases? I can’t imagine this being used to create stable packages to disperse to the world on CRAN, but it could be really useful for development purposes, or for R users/analysts that want lighter weight dependencies (e.g., a package with just the one function needed from a larger package).</p>

<p>This approach of course has drawbacks. The new created package is now broken apart from the original - however, beause it’s automated, you can just re-create it.</p>

<p>Another pain point would surely be with packages that have C/C++ code in them.</p>

<p>The package: <code class="highlighter-rouge">atomize</code>.</p>

<p>The package was made possible by the awesome <a href="https://github.com/MangoTheCat/functionMap">functionMap</a> package by <a href="https://github.com/gaborcsardi">Gábor Csárdi</a>, and the more well-known <code class="highlighter-rouge">devtools</code>.</p>

<p>Expect bugs, the package has no tests. Sorry :(</p>

<h2 id="installation">Installation</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"ropenscilabs/atomize"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"atomize"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h2 id="usage">usage</h2>

<h3 id="atomize-a-fxn-into-separate-package">atomize a fxn into separate package</h3>

<p>You can select one function, or many. Here, I’m using another package I maintain, <a href="https://github.com/ropenscilabs/rredlist">rredlist</a>, a pkg to interact with the <a href="http://apiv3.iucnredlist.org/api/v3/docs">IUCN Redlist API</a>.</p>

<p>In this example, I want a new package called <code class="highlighter-rouge">foobar</code> with just the function <code class="highlighter-rouge">rl_citation()</code>. The function <code class="highlighter-rouge">atomize::atomizer()</code> takes the path for the package to extract from, then a path for the new package, then the function names.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">atomizer</span><span class="p">(</span><span class="n">path_ref</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"../rredlist"</span><span class="p">,</span><span class="w"> </span><span class="n">path_new</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"../foobar"</span><span class="p">,</span><span class="w"> </span><span class="n">funcs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"rl_citation"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>This creates a new package in the <code class="highlighter-rouge">path_new</code> directory</p>

<h3 id="install">install</h3>

<p>Now we need to install the new package, can do easily with <code class="highlighter-rouge">devtools::install()</code></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install</span><span class="p">(</span><span class="s2">"../foobar"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="load">load</h3>

<p>Then load the new package</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"foobar"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="call-function">call function</h3>

<p>Now call the function in the new package</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">foobar</span><span class="o">::</span><span class="n">rl_citation</span><span class="p">()</span><span class="w">
</span><span class="c1">#&gt; [1] "IUCN 2015. IUCN Red List of Threatened Species. Version 2015-4 &lt;www.iucnredlist.org&gt;"</span><span class="w">
</span></code></pre></div></div>

<p>it’s identical to the same function in the old package</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">identical</span><span class="p">(</span><span class="n">rredlist</span><span class="o">::</span><span class="n">rl_citation</span><span class="p">(),</span><span class="w"> </span><span class="n">foobar</span><span class="o">::</span><span class="n">rl_citation</span><span class="p">())</span><span class="w">
</span><span class="c1">#&gt; [1] TRUE</span><span class="w">
</span></code></pre></div></div>
:ET