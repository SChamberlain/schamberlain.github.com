I"ö0<p>RStudio has a new product called <code class="highlighter-rouge">Shiny</code> that, quoting from their website, ‚Äúmakes it super simple for R users like you to turn analyses into interactive web applications that anyone can use‚Äù. <a href="http://www.rstudio.com/shiny/">See here</a> for more information.</p>

<p>A <code class="highlighter-rouge">Shiny</code> basically consists of two files: a <code class="highlighter-rouge">ui.r</code> file and a <code class="highlighter-rouge">server.r</code> file.  The <code class="highlighter-rouge">ui.r</code> file, as it says, provides the user interface, and the <code class="highlighter-rouge">server.r</code> file provides the the server logic.</p>

<p>Below is what it looks like in the wild (on a browser).</p>

<p><img src="http://sckott.github.io/public/img/shiny_ss.png" alt="center" /></p>

<p>It was pretty easy (for <a href="http://emhart.github.com/">Ted Hart of rOpenSci</a>) to build this app to demonstrate output from the <a href="http://cran.r-project.org/web/packages/rgbif/index.html"><code class="highlighter-rouge">ropensci rgbif</code> package</a>.</p>

<hr />

<h3 id="you-may-need-to-install-packages-first">You may need to install packages first.</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"shiny"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ggplot2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"plyr"</span><span class="p">,</span><span class="w"> </span><span class="s2">"rgbif"</span><span class="p">))</span></code></pre></figure>

<hr />

<h3 id="we-tried-to-build-in-making-real-time-api-calls-to-gbifs-servers-but-the-calls-took-too-long-for-web-speed--so-we-prepare-the-data-first-and-then-serve-it-up-from-saved-data-in-a-rda-file-lets-first-prepare-the-data-well-this-is-what-we-do-on-the-app-itself-but-see-the-next-code-block-for">We tried to build in making real time API calls to GBIF‚Äôs servers, but the calls took too long for web speed.  So we prepare the data first, and then serve it up from saved data in a <code class="highlighter-rouge">.rda</code> file. Let‚Äôs first prepare the data. ‚ÄìWell, this is what we do on the app itself, but see the next code block for</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">rgbif</span><span class="p">)</span><span class="w">
</span><span class="n">splist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Accipiter erythronemius"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Junco hyemalis"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Aix sponsa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Haliaeetus leucocephalus"</span><span class="p">,</span><span class="w"> 
    </span><span class="s2">"Corvus corone"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Threskiornis molucca"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Merops malimbicus"</span><span class="p">)</span><span class="w">
</span><span class="n">out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">llply</span><span class="p">(</span><span class="n">splist</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="n">occurrencelist</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">coordinatestatus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">T</span><span class="p">,</span><span class="w"> </span><span class="n">maxresults</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">splist</span><span class="w">  </span><span class="c1"># name each data.frame with the species names</span><span class="w">
</span><span class="n">setwd</span><span class="p">(</span><span class="s2">"~/ShinyApps/rgbif2"</span><span class="p">)</span><span class="w">  </span><span class="c1"># set directory</span><span class="w">
</span><span class="n">save</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"speciesdata.rda"</span><span class="p">)</span><span class="w">  </span><span class="c1"># save the list of data.frames into an .rda file to serve up</span></code></pre></figure>

<hr />

<h3 id="heres-the-server-logic">Here‚Äôs the server logic</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">shiny</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">plyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rgbif</span><span class="p">)</span><span class="w">

</span><span class="c1">## Set up server output</span><span class="w">
</span><span class="n">shinyServer</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="n">output</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">load</span><span class="p">(</span><span class="s2">"speciesdata.rda"</span><span class="p">)</span><span class="w">
    </span><span class="c1"># define function for server plot output</span><span class="w">
    </span><span class="n">output</span><span class="o">$</span><span class="n">gbifplot</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">reactivePlot</span><span class="p">(</span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">species</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">input</span><span class="o">$</span><span class="n">spec</span><span class="w">
        </span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">out</span><span class="p">[</span><span class="nf">names</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">species</span><span class="p">]</span><span class="w">
        </span><span class="n">print</span><span class="p">(</span><span class="n">gbifmap</span><span class="p">(</span><span class="n">df</span><span class="p">))</span><span class="w">
    </span><span class="p">})</span><span class="w">
    </span><span class="n">output</span><span class="o">$</span><span class="n">cbt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">reactiveText</span><span class="p">(</span><span class="k">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="p">})</span><span class="w">
</span><span class="p">})</span></code></pre></figure>

<hr />

<h3 id="the-user-interface">The user interface</h3>

<figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">shiny</span><span class="p">)</span><span class="w">

</span><span class="c1"># Define UI for application that plots random distributions</span><span class="w">
</span><span class="n">shinyUI</span><span class="p">(</span><span class="n">pageWithSidebar</span><span class="p">(</span><span class="n">headerPanel</span><span class="p">(</span><span class="s2">"rgbif example"</span><span class="p">),</span><span class="w"> </span><span class="n">sidebarPanel</span><span class="p">(</span><span class="n">checkboxGroupInput</span><span class="p">(</span><span class="s2">"spec"</span><span class="p">,</span><span class="w"> 
    </span><span class="s2">"Species to map:"</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">`Sharp shinned hawk (Accipiter erythronemius)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Accipiter erythronemius"</span><span class="p">,</span><span class="w"> 
        </span><span class="n">`Dark eyed junco (Junco hyemalis)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Junco hyemalis"</span><span class="p">,</span><span class="w"> </span><span class="n">`Wood duck (Aix sponsa)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Aix sponsa"</span><span class="p">,</span><span class="w"> 
        </span><span class="n">`Bald eagle (Haliaeetus leucocephalus)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Haliaeetus leucocephalus"</span><span class="p">,</span><span class="w"> 
        </span><span class="n">`Carrion crow (Corvus corone)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Corvus corone"</span><span class="p">,</span><span class="w"> </span><span class="n">`Australian White Ibis (Threskiornis molucca)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Threskiornis molucca"</span><span class="p">,</span><span class="w"> 
        </span><span class="n">`Rosy Bee-eater (Merops malimbicus)`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Merops malimbicus"</span><span class="p">),</span><span class="w"> </span><span class="n">selected</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Bald eagle (Haliaeetus leucocephalus)"</span><span class="p">))),</span><span class="w"> 
    </span><span class="n">mainPanel</span><span class="p">(</span><span class="n">h5</span><span class="p">(</span><span class="s2">"A map of your selected species: Please note that GBIF is queried for every selection so loading times vary"</span><span class="p">),</span><span class="w"> 
        </span><span class="n">plotOutput</span><span class="p">(</span><span class="s2">"gbifplot"</span><span class="p">))))</span></code></pre></figure>

<hr />

<p>This should be all you need. To actually serve up the app in the web, request to be part of their beta-test of Shiny server on the web <a href="https://rstudio.wufoo.com/forms/shiny-server-beta-program/">here</a>.</p>

<p>Go play with our Shiny app <a href="http://glimmer.rstudio.com/ropensci/rgbif2/">here</a> to see the kind of visualization you can do with the <code class="highlighter-rouge">rgbif</code> package.</p>

<hr />

<h4 id="get-the-rmd-file-used-to-create-this-post-at-my-github-account---or-md-file">Get the .Rmd file used to create this post <a href="https://github.com/sckott/sckott.github.com/tree/master/_drafts/2012-12-10-shiny-r.Rmd">at my github account</a> - or <a href="https://github.com/sckott/sckott.github.com/tree/master/_posts/2012-12-10-shiny-r.md">.md file</a>.</h4>

<h4 id="written-in-markdown-with-help-from-knitr">Written in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, with help from <a href="http://yihui.name/knitr/">knitr</a>.</h4>
:ET