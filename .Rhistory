rmetadata <- "/Users/scottmac2/github/ropensci/rmetadata"
build_win(rmetadata)
library(roxygen2)
rmetadata <- "/Users/scottmac2/github/ropensci/rmetadata"
roxygenize(rmetadata)
check(rmetadata)
library(roxygen2)
rmetadata <- "/Users/scottmac2/github/ropensci/rmetadata"
roxygenize(rmetadata)
check(rmetadata)
install_github("rmetadata", "ropensci")
library(rmetadata)
help(package=rmetadata)
install_github("rpubmed", "ropensci")
library(rpubmed)
plasticity_ids <- entrez_search("pubmed", "phenotypic plasticity", retmax = 2600)$ids[1:100]
plasticity_ids
plasticity_records <- pubmed_fetch(plasticity_ids[1:2])
plasticity_records
plasticity_records[[1]]
library(rmetadata)
count_identifiers("datacite")
print(crossref_citation("10.3998/3336451.0009.101"), style="Bibtex")
print(crossref_citation("10.3998/3336451.0009.101"), style="text")
crossref_search_free(query = "Piwowar Sharing Detailed Research Data Is Associated with Increased Citation Rate PLOS one 2007")
doi <- crossref_search_free(query="Piwowar sharing data PLOS one")$doi
crossref_search(doi = doi)[,1:3]
crossref_r()
crossref_r(from=1990, to=1999)
crossref_r(type = 'journal_article')
crossref_search(query = c("renear", "palmer"), rows = 4)[,1:3]
crossref_search(query = c("renear", "palmer"), year = 2010)[,1:3]
short_doi(doi = "10.1371/journal.pone.0042793")
short_doi(doi = "10.1371/journal.pone.0042793", justshort=FALSE)
md_getrecord(provider = "pensoft", identifier = "10.3897/zookeys.1.10")
md_getrecord(provider = "pensoft", identifier = c("10.3897/zookeys.1.10","10.3897/zookeys.4.57"))
md_listmetadataformats(provider = "dryad")
md_listmetadataformats(provider = "pensoft", identifier = "10.3897/zookeys.1.10")
setwd("~/github/sac/sckott.github.io/")
knitpost("/Users/scottmac2/github/sac/sckott.github.io/_drafts/2013-03-14-r-metadata.Rmd")
knitpost("/Users/scottmac2/github/sac/sckott.github.io/_posts/2013-03-14-r-metadata.Rmd")
setwd("~/github/sac/sckott.github.io/_posts")
knitpost("/Users/scottmac2/github/sac/sckott.github.io/_drafts/2013-03-14-r-metadata.Rmd")
load("/Users/scottmac2/github/ropensci/rmetadata/data/providers.rda")
head(pro)
providers
head(providers)
providers[providers$repo_name %in% 'pmc',"base_url"]
knitpost("/Users/scottmac2/github/sac/sckott.github.io/_drafts/2013-03-14-r-metadata.Rmd")
help(package=rmetadata)
temp <- md_listrecords(provider = "datacite", from = "2011-12-15", until="2012-12-15")
library(rmetadata)
temp <- md_listrecords(provider = "datacite", from = "2011-12-15", until="2012-12-15")
temp <- md_listrecords(provider = "datacite", from = "2011-12-15", until="2012-12-15")
str(temp)
temp[1,]
temp[[1]][1,]
temp[[1]][1,c(2,6,9,10)]
temp <- md_listrecords(provider = "datacite", from = "2009-01-01", until="2013-01-01")
str(temp[[1]])
temp <- md_listrecords(provider = "pmc", from = "2009-01-01", until="2013-01-01")
temp <- md_listrecords(provider = "pensoft", from = "2011-01-01", until="2013-01-01")
temp <- md_listrecords(provider = "pensoft", from = "2011-01-01", until="2013-01-01")
install_github("rmetadata", "ropensci")
library(rmetadata)
temp <- md_listrecords(provider = "pensoft", from = "2011-01-01", until="2013-01-01")
data(providers)
providers$repo_name %in% 'pensoft'
providers[providers$repo_name %in% 'pensoft', ]
md_listrecords(provider="pensoft", fuzzy=TRUE)
provider
provider = "pensoft"
from = "2011-01-01"
until="2013-01-01"
set = NULL
metadataPrefix = 'oai_dc'
token = NULL
if(exists(as.character(substitute(providers)))==TRUE){ NULL } else
{ data(providers); message("loaded providers") }
args <- compact(list(verb = 'ListRecords', set = set, metadataPrefix = metadataPrefix,
from = from, until=until, token=token))
args
if(fuzzy){ get_ <- providers[ agrep(x, providers[,1]), ] } else
{ get_ <- providers[ grep(x, providers[,1]), ] }
fuzzy=TRUE
if(fuzzy){ get_ <- providers[ agrep(x, providers[,1]), ] } else
{ get_ <- providers[ grep(x, providers[,1]), ] }
x=provider
x
if(fuzzy){ get_ <- providers[ agrep(x, providers[,1]), ] } else
{ get_ <- providers[ grep(x, providers[,1]), ] }
get_
nrow(get_)
url <- get_[,"base_url"]
url
iter <- 0
token <- "characters" # define a iterator, also used for gettingn the resumptionToken
nameslist <- list() # define empty list to put joural titles in to
while(is.character(token) == TRUE) # while token is class "character", keep going
{
iter <- iter + 1
args2 <- args
if(token == "characters"){NULL} else {args2$resumptionToken <- token}
crr <- xmlToList(xmlParse(content(GET(url, query=args2), as="text")))
names <- llply(crr$ListRecords)
nameslist[[iter]] <- ldply(names, function(x) cbind(data.frame(x$header), data.frame(x$metadata$dc)))
if( class( try(crr$ListRecords$resumptionToken$text) ) == "try-error") {
token <- 1
} else { token <- crr$ListRecords$resumptionToken$text }
}
library(httr)
while(is.character(token) == TRUE) # while token is class "character", keep going
{
iter <- iter + 1
args2 <- args
if(token == "characters"){NULL} else {args2$resumptionToken <- token}
crr <- xmlToList(xmlParse(content(GET(url, query=args2), as="text")))
names <- llply(crr$ListRecords)
nameslist[[iter]] <- ldply(names, function(x) cbind(data.frame(x$header), data.frame(x$metadata$dc)))
if( class( try(crr$ListRecords$resumptionToken$text) ) == "try-error") {
token <- 1
} else { token <- crr$ListRecords$resumptionToken$text }
}
iter <- 0
token <- "characters" # define a iterator, also used for gettingn the resumptionToken
nameslist <- list() # define empty list to put joural titles in to
is.character(token)
iter <- iter + 1
args2 <- args
if(token == "characters"){NULL} else {args2$resumptionToken <- token}
crr <- xmlToList(xmlParse(content(GET(url, query=args2), as="text")))
crr
names <- llply(crr$ListRecords)
names
nameslist[[iter]] <- ldply(names, function(x) cbind(data.frame(x$header), data.frame(x$metadata$dc)))
iter
nameslist
names
ldply(names, function(x) data.frame(x$metadata$dc))
length(names)
llply(names, function(x) data.frame(x$metadata$dc))
llply(names, function(x) x$metadata$dc)
llply(names, function(x) x$metadata$dc)
llply(names, function(x) x$metadata$dc)[[1]]
sapply(llply(names, function(x) x$metadata$dc)[[1]], x)
sapply(llply(names, function(x) x$metadata$dc)[[1]], nchar)
sapply(llply(names, function(x) x$metadata$dc)[[1]], length(nchar))
sapply(llply(names, function(x) x$metadata$dc)[[1]], function(x) nchar(x))
sapply(llply(names, function(x) x$metadata$dc)[[1]], function(x) length(nchar(x)))
llply(names, function(x) x$metadata$dc)[[1]]
x=names[[1]]
x
tt = x$metadata$dc
tt
sapply(tt, function(x) length(nchar(x)))
uu[uu %in% 0]
uu = sapply(tt, function(x) length(nchar(x)))
uu[uu %in% 0]
uu[uu %in% 0] <- "none"
uu
tt[uu %in% 0] <- "none"
tt
tt[uu %in% 0]
uu %in% 0
uu
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
uu %in% 0
tt[uu %in% 0]
tt[uu %in% 0] <- "none"
tt
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
tt
}
llply(names, shit)
out <- llply(names, shit)
out <- ldply(names, shit)
out <- llply(names, shit)
out
tt[names(tt) %in% '.attrs']
tt[names(tt) %in% '.attrs']
tt[!names(tt) %in% '.attrs']
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
tt[!names(tt) %in% '.attrs']
tt
}
out <- llply(names, shit)
out <- ldply(names, shit)
sapply(llply(names, shit), length)
names2 <- llply(crr$ListRecords)
names2 <- names2[!names(names2) %in% "resumptionToken",]
names2 <- names2[!names(names2) %in% "resumptionToken"]
out <- llply(names2, shit)
out
sapply(out, length)
lapply(out, names)
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
tt[!names(tt) %in% '.attrs']
}
out <- llply(names2, shit)
lapply(out, names)
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
}
out <- llply(names2, shit)
lapply(out, names)
out[[1]]
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
xx[!length(xx)]
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
xx[-length(xx)]
}
out <- llply(names2, shit)
lapply(out, names)
lapply(out, length)
out[[10]]
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
yy = xx[-length(xx)]
yy[names(yy) %in% "creator"] <- paste0(yy[names(yy) %in% "creator"],collapse=",")
yy
}
out <- llply(names2, shit)
lapply(out, length)
lapply(out, names)
x = out[[1]]
x
x = names2[[1]]
x
tt = x$metadata$dc
tt
x
tt = x$metadata$dc
tt
uu = sapply(tt, function(x) length(nchar(x)))
uu
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
xx
yy = xx[-length(xx)]
yy
paste0(yy[names(yy) %in% "creator"],collapse=",")
paste0(yy[names(yy) %in% "creator"],collapse=";")
yy[names(yy) %in% "creator"]
yy
yy[!names(yy) %in% "creator"]
singlecre <- paste0(yy[names(yy) %in% "creator"],collapse=";")
singlecre
yytemp <- yy[!names(yy) %in% "creator"]
yytemp$creator <- singlecre
yytemp
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
yy = xx[-length(xx)]
singlecre <- paste0(yy[names(yy) %in% "creator"],collapse=";")
yytemp <- yy[!names(yy) %in% "creator"]
yytemp$creator <- singlecre
yytemp
}
out <- llply(names2, shit)
lapply(out, names)
lapply(out, length)
ldply(names2, shit)
out <- llply(names2, shit)
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
yy = xx[-length(xx)]
singlecre <- paste0(yy[names(yy) %in% "creator"],collapse=";")
yytemp <- yy[!names(yy) %in% "creator"]
yytemp$creator <- singlecre
data.frame(yytemp)
}
llply(names2, shit)
ldply(names2, shit)
out <- llply(names2, shit)
#' List records of an OAI-PMH from a data provider.
#'
#' List records for the data sources from the OAI-PMH list, and others not
#' 		on that list, including PMC, DataCite, Hindawi Journals, Dryad, and
#' 		Pensoft Journals.
#'
#' @import XML httr plyr
#' @param provider The metadata provider.
#' @param from Specifies that records returned must have been
#' 		created/update/deleted on or after this date.
#' @param until Specifies that records returned must have been
#' 		created/update/deleted on or before this date.
#' @param set Optional argument with a setSpec value, which specifies set
#' 		criteria for selective harvesting.
#' @param metadataPrefix Specifies the metadata format that the records will be
#'     returned in.
#' @param token A token previously provided by the server to resume a request
#'     where it last left off.
#' @param fuzzy Do fuzzy search or not (default FALSE). Fuzzy uses agrep.
#' @seealso \code{\link{md_identify}}, \code{\link{md_listidentifiers}},
#' 		\code{\link{md_listmetadataformats}}, \code{\link{md_getrecord}},
#' 		\code{\link{md_listsets}}, \code{\link{count_identifiers}}
#' @author Scott Chamberlain \email{myrmecocystus@@gmail.com}
#' @examples \dontrun{
#' # Single source
#' md_listrecords(provider = "datacite")
#'
#' # Fuzzy seaerch
#' md_listrecords(provider = "biology", fuzzy=TRUE)
#' }
#' @export
md_listrecords <- function(provider = NULL, from = NULL, until = NULL,
set = NULL, metadataPrefix = 'oai_dc', token = NULL, fuzzy = FALSE)
{
if(exists(as.character(substitute(providers)))==TRUE){ NULL } else
{ data(providers); message("loaded providers") }
args <- compact(list(verb = 'ListRecords', set = set, metadataPrefix = metadataPrefix,
from = from, until=until, token=token))
doit <- function(x, args) {
if(fuzzy){ get_ <- providers[ agrep(x, providers[,1]), ] } else
{ get_ <- providers[ grep(x, providers[,1]), ] }
if(nrow(get_) == 0){
data.frame(x="no match found")
} else
if(nrow(get_) > 1){
# user prompt
# sort alphabetically
get_df <- get_[order(get_$repo_name), ]
rownames(get_df) <- 1:nrow(get_df)
# prompt
cat("\n\n")
print(data.frame(get_df$repo_name))
cat("\nMore than one match found for provider '", provider, "'!\n
Enter row number of provider (other inputs will return 'NA'):\n") # prompt
take <- scan(n = 1, quiet = TRUE, what = 'raw')
# Get base url to use
if(length(take) == 0)
stop(paste("\nYou need to type in a number from 1 to ",nrow(get_df),'\n',sep=''))
if(take %in% seq_len(nrow(get_df))){
take <- as.numeric(take)
cat("Input accepted, took provider '", as.character(get_df$repo_name[take]), "'.\n")
url <-  get_df$base_url[take]
} else { stop("\nNo match found!\n") }
} else
{ url <- get_[,"base_url"] }
iter <- 0
token <- "characters" # define a iterator, also used for gettingn the resumptionToken
nameslist <- list() # define empty list to put joural titles in to
while(is.character(token) == TRUE) # while token is class "character", keep going
{
iter <- iter + 1
args2 <- args
if(token == "characters"){NULL} else {args2$resumptionToken <- token}
crr <- xmlToList(xmlParse(content(GET(url, query=args2), as="text")))
names2 <- llply(crr$ListRecords)
names2 <- names2[!names(names2) %in% "resumptionToken"]
# 					nameslist[[iter]] <- ldply(names, function(x) cbind(data.frame(x$header), data.frame(x$metadata$dc)))
# 					tt <- sapply(llply(names, function(x) x$metadata$dc)[[1]], function(x) length(nchar(x)))
shit <- function(x){
tt = x$metadata$dc
uu = sapply(tt, function(x) length(nchar(x)))
tt[uu %in% 0] <- "none"
xx = tt[names(tt) %in% c('title','creator','publisher','date','type','identifier')]
yy = xx[-length(xx)]
singlecre <- paste0(yy[names(yy) %in% "creator"],collapse=";")
yytemp <- yy[!names(yy) %in% "creator"]
yytemp$creator <- singlecre
data.frame(yytemp)
}
out <- ldply(names2, shit)
nameslist[[iter]] <- out
# 					nameslist[[iter]] <- ldply(names, function(x) data.frame(x$metadata$dc))
if( class( try(crr$ListRecords$resumptionToken$text) ) == "try-error") {
token <- 1
} else { token <- crr$ListRecords$resumptionToken$text }
}
do.call(rbind, nameslist) # concatenate
}
llply(provider, function(x) doit(x, args) )
}
md_listrecords(provider = "datacite")
temp <- md_listrecords(provider = "pensoft", from = "2011-01-01", until="2013-01-01")
temp <- md_listrecords(provider = "pensoft", from = "2011-10-01", until="2012-01-01")
length(temp)
length(temp[[1]])
ldply(temp)
temp2 <- ldply(temp)
head(temp2)
names(temp2)
temp2 <- ldply(temp)[,-1]
names(temp2)
names(temp2)
head(temp2)
str(temp2)
sapply(temp2$creator, function(x) strsplit(x, ";"))
sapply(temp2$creator, function(x) strsplit(as.character(x), ";"))
sapply(temp2$creator, function(x) length(strsplit(as.character(x), ";")))
sapply(temp2$creator, function(x) length(strsplit(as.character(x), ";")[[1]]))
head(temp2)
str(temp2)
temp2$type
auths
auths <- sapply(temp2$creator, function(x) length(strsplit(as.character(x), ";")[[1]]))
auths
toplot <- data.frame(authors = auths, articletype = temp2$type)
toplot
ggplot(toplot, aes(articletype, authors)) +
geom_bar()
library(ggplot2)
ggplot(toplot, aes(articletype, authors)) +
geom_bar()
ggplot(toplot, aes(articletype, authors)) +
geom_bar() +
coord_flip()
library(ggthemes)
ggplot(toplot, aes(articletype, authors)) +
theme_tufte()
geom_bar() +
coord_flip()
ggplot(toplot, aes(articletype, authors)) +
theme_tufte() +
geom_bar() +
coord_flip()
ggplot(toplot, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar() +
coord_flip()
ddply(toplot, .(articletype), summarise,
authors = sum(authors))
toplot_ <- ddply(toplot, .(articletype), summarise,
authors = sum(authors))
toplot_
library(reshape)
sort_df(toplot_, "authors")
toplot_ <- sort_df(toplot_, "authors")
toplot_
ggplot(toplot, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar() +
coord_flip()
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar() +
coord_flip()
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='bin') +
coord_flip()
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
str(tplot_)
str(toplot_)
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
toplot_
library(reshape)
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
toplot_ <- ddply(toplot, .(articletype), summarise,
authors = mean(authors))
toplot_ <- sort_df(toplot_, "authors")
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
toplot_
toplot_[order(toplot_[,"authors"], decreasing=TRUE),]
toplot_ <- ddply(toplot, .(articletype), summarise,
authors = mean(authors))
toplot_ <- toplot_[order(toplot_[,"authors"], decreasing=TRUE),]
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
reorder(toplot_$articletype, toplot_$authors)
toplot_$articletype <- reorder(toplot_$articletype, toplot_$authors)
ggplot(toplot_, aes(articletype, authors)) +
theme_tufte(base_size=16) +
geom_bar(stat='identity') +
coord_flip()
knitpost("/Users/scottmac2/github/sac/sckott.github.io/_drafts/2013-03-14-r-metadata.Rmd")
setwd("~/github/sac/sckott.github.io/")
